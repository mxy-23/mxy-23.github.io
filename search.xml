<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java</title>
      <link href="/post/7f1ae6d2.html"/>
      <url>/post/7f1ae6d2.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序前端</title>
      <link href="/post/2d5dfe47.html"/>
      <url>/post/2d5dfe47.html</url>
      
        <content type="html"><![CDATA[<h3 id="微信小程序前端开发"><a href="#微信小程序前端开发" class="headerlink" title="微信小程序前端开发"></a>微信小程序前端开发</h3><h4 id="一-小程序简介"><a href="#一-小程序简介" class="headerlink" title="一. 小程序简介"></a>一. 小程序简介</h4><h5 id="1-1-介绍"><a href="#1-1-介绍" class="headerlink" title="1.1 介绍"></a>1.1 介绍</h5><p>微信小程序，简称小程序，英文名Mini Program ，是一种不需要下载安装即可使用的应用，它实现了应用“触手可及”的梦想,用户扫一扫或搜一下即可打开应用</p><h5 id="1-2-为什么选择微信小程序"><a href="#1-2-为什么选择微信小程序" class="headerlink" title="1.2 为什么选择微信小程序"></a>1.2 为什么选择微信小程序</h5><ul><li>1.微信有海量用户，而且粘性很高，在微信里开发产品更容易触达用户.</li><li>2.推广app 或公众号的成本太高。</li><li>3.开发适配成本低。</li><li>4.容易小规模试错，然后快速迭代。</li><li>5.跨平台。</li></ul><h5 id="1-3-疯狂的微信小程序"><a href="#1-3-疯狂的微信小程序" class="headerlink" title="1.3 疯狂的微信小程序"></a>1.3 疯狂的微信小程序</h5><ul><li>1.微信月活已经达到10.82亿。其中55岁以上的用户也达到6300万</li><li>2.信息传达数达到450亿，较去年增长18%;视频通话4.1亿次,增长100%</li><li>3.小程序覆盖超过200+行业，交易额增长超过6倍，服务1000亿+人次,创造出了5000亿+的商业价值</li></ul><h5 id="1-4-其他小程序平台"><a href="#1-4-其他小程序平台" class="headerlink" title="1.4 其他小程序平台"></a>1.4 其他小程序平台</h5><ul><li>1.支付宝小程序</li><li>2.百度小程序</li><li>3.QQ小程序</li><li>4.今日头条+抖音小程序</li></ul><h5 id="1-5-优秀的微信小程序"><a href="#1-5-优秀的微信小程序" class="headerlink" title="1.5 优秀的微信小程序"></a>1.5 优秀的微信小程序</h5><ul><li>拼多多</li><li>滴滴出行</li><li>欢乐斗地主</li><li>智行火车票</li><li>唯品会</li></ul><h4 id="二-环境准备"><a href="#二-环境准备" class="headerlink" title="二. 环境准备"></a>二. 环境准备</h4><h5 id="2-1-注册账号"><a href="#2-1-注册账号" class="headerlink" title="2.1 注册账号"></a>2.1 注册账号</h5><p>网址如下：<a href="https://mp.weixin.qq.com/wxopen/waregister?action=step1">https://mp.weixin.qq.com/wxopen/waregister?action=step1</a></p><h5 id="2-2-获取appid"><a href="#2-2-获取appid" class="headerlink" title="2.2 获取appid"></a>2.2 获取appid</h5><p><a href="https://mp.weixin.qq.com/wxamp/home/guide?lang=zh_CN&amp;token=1539417953">小程序 (qq.com)</a></p><p>开发-开发管理-开发设置</p><h4 id="三-第一个小程序"><a href="#三-第一个小程序" class="headerlink" title="三. 第一个小程序"></a>三. 第一个小程序</h4><h5 id="3-1-扫码登录小程序开发者工具"><a href="#3-1-扫码登录小程序开发者工具" class="headerlink" title="3.1 扫码登录小程序开发者工具"></a>3.1 扫码登录小程序开发者工具</h5><h5 id="3-2新建小程序项目"><a href="#3-2新建小程序项目" class="headerlink" title="3.2新建小程序项目"></a>3.2新建小程序项目</h5><h5 id="3-3-小程序结构目录"><a href="#3-3-小程序结构目录" class="headerlink" title="3.3 小程序结构目录"></a>3.3 小程序结构目录</h5><p>（1）小程序框架的目的是通过尽可能简单，高效的方式让开发者可以在微信中使用原生APP体验1的服务</p><p>小程序提供了视图层的语言：wxml,wxss以及js，并且在视图层与逻辑层之间提供了数据传输和事件系统，让开发者能够专注于数据与逻辑</p><p>（2）小程序文件结构与传统web对比</p><div class="table-container"><table><thead><tr><th>结构</th><th>传统web</th><th>微信小程序</th></tr></thead><tbody><tr><td>结构</td><td>HTML</td><td>WXML</td></tr><tr><td>样式</td><td>CSS</td><td>WXSS</td></tr><tr><td>逻辑</td><td>JavaScript</td><td>JavaScript</td></tr><tr><td>配置</td><td>无</td><td>JSON</td></tr></tbody></table></div><h5 id="3-4-全局配文件-APP-json"><a href="#3-4-全局配文件-APP-json" class="headerlink" title="3.4 全局配文件-APP.json"></a>3.4 全局配文件-APP.json</h5><h6 id="3-4-1-pages字段"><a href="#3-4-1-pages字段" class="headerlink" title="3.4.1 pages字段"></a>3.4.1 pages字段</h6><ul><li>用于指定小程序由哪些页面组成，每一项都对应一个页面的 路径（含文件名） 信息。文件名不需要写文件后缀，框架会自动去寻找对应位置的 <code>.json</code>, <code>.js</code>, <code>.wxml</code>, <code>.wxss</code> 四个文件进行处理；==未指定entryPagePath时，数组的第一项代表小程序的初始页面（首页）==</li><li>**小程序中对页面进行修改，即是对pages数组进行修改</li></ul><h6 id="3-4-2-windows字段"><a href="#3-4-2-windows字段" class="headerlink" title="3.4.2 windows字段"></a>3.4.2 windows字段</h6><ul><li>用于设置小程序的状态栏、导航条、标题、窗口背景色</li><li>navigationBarTextStyle：==导航栏标题颜色，仅支持black和white==</li><li>enablePullDownRefresh：是否开启全局的下拉刷新</li><li>backgroundTextStyle：下拉loading的样式，仅有light和dark两种属性</li><li>backgroundColor：窗口的背景颜色</li></ul><h6 id="3-4-3-tabbar字段"><a href="#3-4-3-tabbar字段" class="headerlink" title="3.4.3 tabbar字段"></a>3.4.3 tabbar字段</h6><ul><li>color：tab上的文字默认颜色，仅支持十六进制颜色</li></ul><p>==<strong>页面的命名得是中文</strong>==</p><ul><li>backgroundColor：tab上的背景颜色，仅支持十六进制颜色</li><li>position：tab的位置，仅支持top和bottom，默认为bottom</li><li>list：tar列表，最少为两个，最多为五个</li></ul><h6 id="3-4-4-页面配置文件"><a href="#3-4-4-页面配置文件" class="headerlink" title="3.4.4 页面配置文件"></a>3.4.4 页面配置文件</h6><p><img src="D:\Typora\微信小程序开发-images\页面pages配置.jpg" alt="页面pages配置"></p><h6 id="3-4-5-sitemap配置"><a href="#3-4-5-sitemap配置" class="headerlink" title="3.4.5 sitemap配置"></a>3.4.5 sitemap配置</h6><p>sitemap.json文件用于配置小程序以及页面是否允许被微信索引；如果没有sitemap.json，则默认所有页面都允许被索引</p><h4 id="四-模板语法"><a href="#四-模板语法" class="headerlink" title="四. 模板语法"></a>四. 模板语法</h4><h5 id="4-1-数据绑定"><a href="#4-1-数据绑定" class="headerlink" title="4.1 数据绑定"></a>4.1 数据绑定</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">text相当于web中的span标签，行内元素，不会换行</span></span><br><span class="line"><span class="comment">view相当于web中的div标签，块级元素，会换行</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h6 id="4-1-1-简单数据绑定"><a href="#4-1-1-简单数据绑定" class="headerlink" title="4.1.1 简单数据绑定"></a>4.1.1 简单数据绑定</h6><p>使用双括号将变量包起来</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--pages/test01/test01.wxml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span>&gt;</span>pages/test01/test01.wxml<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span> <span class="attr">hover-class</span>=<span class="string">&quot;none&quot;</span> <span class="attr">hover-stop-propagation</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;mxy&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span> <span class="attr">hover-class</span>=<span class="string">&quot;none&quot;</span> <span class="attr">hover-stop-propagation</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;num&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span> <span class="attr">hover-class</span>=<span class="string">&quot;none&quot;</span> <span class="attr">hover-stop-propagation</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;isman&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span> <span class="attr">hover-class</span>=<span class="string">&quot;none&quot;</span> <span class="attr">hover-stop-propagation</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;person.name&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 在标签的属性中使用--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">data-num</span>=<span class="string">&quot;&#123;&#123;num&#125;&#125;&quot;</span> <span class="attr">hover-class</span>=<span class="string">&quot;none&quot;</span> <span class="attr">hover-stop-propagation</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    自定义属性</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--使用布尔类型充当属性 checked</span></span><br><span class="line"><span class="comment"> 字符串和花括号之间一定不要存在空格，否则会导致识别失败</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span> <span class="attr">hover-class</span>=<span class="string">&quot;none&quot;</span> <span class="attr">hover-stop-propagation</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">checkbox</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">disabled</span>=<span class="string">&quot;false&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;false&quot;</span> <span class="attr">color</span>=<span class="string">&quot;&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;&#123;&#123;isChecked&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">checkbox</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">   <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">mxy</span>: <span class="string">&quot;mxy大帅比&quot;</span>,</span><br><span class="line">        <span class="attr">num</span>: <span class="number">1000</span>,</span><br><span class="line">        <span class="attr">isman</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">person</span>: &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;miaoxinyong&quot;</span>,</span><br><span class="line">            <span class="attr">age</span>: <span class="number">21</span>,</span><br><span class="line">            <span class="attr">address</span>:<span class="string">&quot;NCU&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">isChecked</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h6 id="4-1-2-运算-》表达式"><a href="#4-1-2-运算-》表达式" class="headerlink" title="4.1.2 运算-》表达式"></a>4.1.2 运算-》表达式</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span> <span class="attr">hover-class</span>=<span class="string">&quot;none&quot;</span> <span class="attr">hover-stop-propagation</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;1+1&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span> <span class="attr">hover-class</span>=<span class="string">&quot;none&quot;</span> <span class="attr">hover-stop-propagation</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;&quot;1&quot;+1&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 输出11--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span> <span class="attr">hover-class</span>=<span class="string">&quot;none&quot;</span> <span class="attr">hover-stop-propagation</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;10%2===0?&quot;偶数&quot;:&quot;奇数&quot;&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--输出偶数--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 数据路径运算--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;object.key&#125;&#125; &#123;&#123;array[0]&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">   <span class="attr">data</span>: &#123;</span><br><span class="line">       <span class="attr">mxy</span>: <span class="string">&quot;mxy大帅比&quot;</span>,</span><br><span class="line">        <span class="attr">num</span>: <span class="number">1000</span>,</span><br><span class="line">        <span class="attr">isman</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">person</span>: &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;miaoxinyong&quot;</span>,</span><br><span class="line">            <span class="attr">age</span>: <span class="number">21</span>,</span><br><span class="line">            <span class="attr">address</span>:<span class="string">&quot;NCU&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">isChecked</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">object</span>: &#123;</span><br><span class="line">            <span class="attr">key</span>: <span class="string">&#x27;Hello &#x27;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">array</span>: [<span class="string">&#x27;MINA&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h6 id="4-1-3-数组和对象循环"><a href="#4-1-3-数组和对象循环" class="headerlink" title="4.1.3 数组和对象循环"></a>4.1.3 数组和对象循环</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 列表循环</span></span><br><span class="line"><span class="comment"> 1.wx:for=&quot;&#123;&#123;数组&#125;&#125;&quot; wx:for-item=&quot;循环项的名称&quot; wx:for-index=&quot;循环项的索引&quot;</span></span><br><span class="line"><span class="comment"> 2.Wx：key =&quot;唯一的值&quot; 用来提高列表渲染的性能</span></span><br><span class="line"><span class="comment"> Wx:key 绑定一个普通的字符串的时候 那么这个字符串名称 肯定是循环数组中的 对象的 唯一属性</span></span><br><span class="line"><span class="comment"> wx:key=&quot;*this&quot; 表示你的数组是一个普通的数组   *this 表示的是循环项 </span></span><br><span class="line"><span class="comment"> 3.当出现数组·1的嵌套循环时，以下代码不要出现 绑定1的名称 不要重名</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 4.Wx:for-item可以指定数组当前元素的变量名</span></span><br><span class="line"><span class="comment"> wx:for-index可以指定数组当前下标的变量名</span></span><br><span class="line"><span class="comment"> 5.默认数组的当前项的下标变量名默认为 index，数组当前项的变量名默认为 item</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;list&#125;&#125;&quot;</span> <span class="attr">wx:for-item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">wx:for-index</span>=<span class="string">&quot;index&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">     索引：&#123;&#123;index+1&#125;&#125;</span><br><span class="line">     --</span><br><span class="line">     值：&#123;&#123;item.name&#125;&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 对象循环</span></span><br><span class="line"><span class="comment"> 1.wx:for=&quot;&#123;&#123;对象&#125;&#125;&quot; wx:for-item=&quot;对象的值&quot; wx:for-index=&quot;对象的属性&quot;</span></span><br><span class="line"><span class="comment"> 2.循环对象的时候 最好把item和index的名称都修改一下 </span></span><br><span class="line"><span class="comment">  wx:for-item=&quot;key&quot; wx:for-index=&quot;value&quot;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span> <span class="attr">hover-class</span>=<span class="string">&quot;none&quot;</span> <span class="attr">hover-stop-propagation</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    对象的循环</span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;person&#125;&#125;&quot;</span>  <span class="attr">wx:for-item</span>=<span class="string">&quot;value&quot;</span> <span class="attr">wx:for-index</span>=<span class="string">&quot;key&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">        对象的属性：&#123;&#123;key&#125;&#125;</span><br><span class="line">        --</span><br><span class="line">        值：&#123;&#123;value&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">   <span class="attr">data</span>: &#123;</span><br><span class="line">       <span class="attr">mxy</span>: <span class="string">&quot;mxy大帅比&quot;</span>,</span><br><span class="line">        <span class="attr">num</span>: <span class="number">1000</span>,</span><br><span class="line">        <span class="attr">isman</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">person</span>: &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;miaoxinyong&quot;</span>,</span><br><span class="line">            <span class="attr">age</span>: <span class="number">21</span>,</span><br><span class="line">            <span class="attr">address</span>:<span class="string">&quot;NCU&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">isChecked</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">object</span>: &#123;</span><br><span class="line">            <span class="attr">key</span>: <span class="string">&#x27;Hello &#x27;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">array</span>: [<span class="string">&#x27;MINA&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>block标签的使用：</p><ul><li>占位符的标签（当我们想循环某个对象时，不想加一层额外的标签，可以使用block）</li><li>写代码的时候，可以被看到这个标签存在</li><li>页面渲染，小程序会把他移除掉</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;[1, 2, 3]&#125;&#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span> &#123;&#123;index&#125;&#125;: <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span> &#123;&#123;item&#125;&#125; <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黑马程序员html</title>
      <link href="/post/b342da2d.html"/>
      <url>/post/b342da2d.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js提高</title>
      <link href="/post/a27602af.html"/>
      <url>/post/a27602af.html</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript深度开发指南-全栈技术提升篇"><a href="#JavaScript深度开发指南-全栈技术提升篇" class="headerlink" title="JavaScript深度开发指南-全栈技术提升篇"></a>JavaScript深度开发指南-全栈技术提升篇</h1><h3 id="一-发展史，ECMA，编程语言，JS相关，变量，js值"><a href="#一-发展史，ECMA，编程语言，JS相关，变量，js值" class="headerlink" title="一.发展史，ECMA，编程语言，JS相关，变量，js值"></a>一.发展史，ECMA，编程语言，JS相关，变量，js值</h3><h4 id="1-五大浏览器的内核"><a href="#1-五大浏览器的内核" class="headerlink" title="1.五大浏览器的内核"></a>1.五大浏览器的内核</h4><ul><li>IE :trident</li><li>Chrome:webkit blink</li><li>sofair:webkit</li><li>firefox:gecko</li><li>opera:presto</li></ul><h4 id="2-浏览器的发展历史和JS的诞生（前端人员的专业素养）"><a href="#2-浏览器的发展历史和JS的诞生（前端人员的专业素养）" class="headerlink" title="2.浏览器的发展历史和JS的诞生（前端人员的专业素养）"></a>2.浏览器的发展历史和JS的诞生（前端人员的专业素养）</h4><p>（1）1990年，一个叫做蒂姆伯纳斯李用超文本分享咨询的人，world wide web移植到C上，将名字改成libwww/nexus(libwww为真正意义上的浏览器)，允许别人浏览他人编写的网站</p><p>（2）1993年，美国一所伊利诺大学NCSA组织(马克 安德森)开发了一个名字为MOSIAC的浏览器，显示图像，真正意义上的图形化界面</p><p>（3）1994年，安德森与吉姆拉克拉（硅图公司SGI），这两人成立了一家MOSIAC communication corporation 中途出现一些插曲，MOSIAC    -&gt;伊拉诺大学，转让给了一个名叫spy glass的公司，将其改为Netscape  communication corporation，网景公司开发一个叫netscape navigation</p><p>（4）1996年，微软公司收购spy glass，开发出来IE浏览器 全程为Internet exploration（==中国的QQ浏览器 360浏览器 猎豹浏览器 均没有自己的内核==）；其后IE3 Jscript出现；网景公司中的一个员工在netscape navigation的基础上开发出了livescript；JAVA活跃起来，SUM公司商量合作宣传产品，原来的livescript变为javascript</p><p>（5）2001年，IE6和XP诞生，出现了JS引擎</p><p>（6）2003年，mozilla公司 firefox诞生，根据netscape navigator</p><p>（7）2008年，谷歌基于webkit blink (progressive web app 渐进式WEBAPP)开发了chrome浏览器，V8引擎-&gt;JS引擎，==直接翻译机器码==，==独立于浏览器运行==</p><p>（8）2009年甲骨文oracle公司收购了sum公司，JS的所有权归属于甲骨文</p><h4 id="3-ECMA（Eurpoean-Computer-Manufactures-Association-）"><a href="#3-ECMA（Eurpoean-Computer-Manufactures-Association-）" class="headerlink" title="3.ECMA（Eurpoean Computer Manufactures Association ）"></a>3.ECMA（Eurpoean Computer Manufactures Association ）</h4><p>欧洲计算机制造联合会-日内瓦，评估，开发，认可，计算机的标准</p><p>ECMA-262规范：ECMASCRIPT规范 脚本语言的规范</p><p><strong>ES5，ES6：规范化脚本语言</strong> </p><h5 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h5><p>1.编译型：编码&gt;编译器&gt;机器语言&gt;可执行的文件</p><ul><li>没有办法跨平台移植，执行速度快</li><li>适合写大型程序，逻辑性较强的程序</li></ul><p>2.解释型：源码&gt;编译器&gt;解释一行就执行一行</p><ul><li>不需要根据不同系统进行移植，执行速度慢，但是差别不大</li></ul><p>3.脚本语言：脚本引擎&gt;引擎解释器&gt;</p><p>（前后端均有脚本语言：前端有javascript(客户端脚本) 后端有php（服务端脚本））</p><p>asp:微软开发的针对后端服务的脚本程序，最多用于企业的官方网站</p><p>微软开发了一个.net 框架：提供了很多模板式的UI</p><p>Jscript微软：只支持IE</p><p>C#:微软开发的语言</p><p>4.javascript</p><ul><li>ECMAScript:语法，变量，关键字，保留字，值，原始类型，引用类型运算，继承，函数</li><li>DOM：W3C规范</li><li>BOM：没有规范</li></ul><p>5.单线程 多线程：JS引擎是单线程，==但是可以模拟多线程==,通过轮转时间片，短时间内执行多个任务片段</p><ul><li>任务1 任务2 </li><li>切分任务 1 任务2 </li><li>随机排列这些任务片段，组成队列</li><li>按照队列顺序将任务片段送进JS进程</li><li>JS进程执行一个又一个任务片段</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/tpl&quot;</span> <span class="attr">id</span>=<span class="string">&quot;tpl&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">此处故意将javascript改为html，故意写错的目的：企业级开发作为模板</span><br></pre></td></tr></table></figure><p>6.Javascript HTML CSS区别在哪里：</p><ul><li>HTML CSS :不具备逻辑性</li><li>javascript：一门编程语言 必须具备有 变量，函数，数据结构</li></ul><p>==JS引擎是根据;来判断一个句子是否结束（一种良好的书写习惯）==</p><p>7.企业开发中：都有相应的命名规范：不能以数字开头，能用字母下划线开头，变量里面可以包含字母，数字，下换线；关键字和保留字不可以使用；==语义化==；==变量名用小驼峰命名法==；尽可能不要使用拼音</p><p>8.js的值</p><ul><li><p>原始值（基本数据类型）：Number String Boolean undefined null（==JS是根据JS的值来判断变量的类型的，通过值来判断语言的类型，是弱类型语言==）</p><ul><li>动态语言基本上是脚本语言，脚本语言基本上是弱类型语言</li><li>静态语言基本上是编译型语言，一定是强类型语言                                                                                                                                                                </li></ul></li><li><p>引用型：object array function date regexp(将值存在于堆内存中，栈内存存值在堆内存中对应的地址)</p></li></ul><h3 id="二-基本语法，错误，规范，运算符判断分支，注释"><a href="#二-基本语法，错误，规范，运算符判断分支，注释" class="headerlink" title="二.基本语法，错误，规范，运算符判断分支，注释"></a>二.基本语法，错误，规范，运算符判断分支，注释</h3><p>1.错误</p><ul><li>脚本框与脚本框之间的错误是不会相互影响的 </li><li>在项目开发中，将不同的功能写在不同的脚本框中很常见</li></ul><p>2.运算符</p><p>两个字符串相除的结果：NaN</p><p>1/0：infinity</p><p>交换两个数字的值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var a=1,b=2;</span><br><span class="line">a=a+b;</span><br><span class="line">b=a-b;</span><br><span class="line">a=a-b;</span><br></pre></td></tr></table></figure><p>3.自增，自减问题：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a=5,b;</span><br><span class="line">b=a-- + --a;</span><br><span class="line">console.log(b,a);//输出结果为：8,3</span><br></pre></td></tr></table></figure><h3 id="函数参数默认值，递归，预编译流程，原理，现象，暗示全局变量"><a href="#函数参数默认值，递归，预编译流程，原理，现象，暗示全局变量" class="headerlink" title="函数参数默认值，递归，预编译流程，原理，现象，暗示全局变量"></a>函数参数默认值，递归，预编译流程，原理，现象，暗示全局变量</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">a=<span class="number">1</span>,b</span>)&#123; <span class="comment">//形参里面赋值的做法，低版本浏览器是不兼容的（es5不支持这种写法）</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a);<span class="comment">//1</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(b);<span class="comment">//2</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">test</span>(<span class="literal">undefined</span>,<span class="number">2</span>);<span class="comment">//如果实参值为undefined，则找形参的值；实参赋值为非undefined，则找实参的值</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">a,b</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> a=argumenes[<span class="number">0</span>]||<span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> b=<span class="variable language_">arguments</span>[<span class="number">1</span>]||;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a+b);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>1.预编译</p><ul><li>检查通篇的语法错误<ul><li>预编译<ul><li>函数声明整体提升，变量只有声明提升，赋值是不提升的</li></ul></li></ul></li><li>解释一行，执行一行</li></ul><p>AO：活跃函数  函数上下文</p><ul><li>创建AO的对象</li><li>第一步：寻找函数的形参 和变量声明</li><li>第三步：实参赋值给形参</li><li>第二步：寻找函数体声明，赋值函数体</li><li>第四步：执行</li></ul><p>GO：全局上下文</p><ul><li>第一步:先找变量声明</li><li>第二步：找函数声明</li><li>第三步：执行</li></ul><p><img src="https://cdn.staticaly.com/gh/mxy-23/picgo@main/img/image-20210914191538524.png" alt="image-20210914191538524"></p><p>图中c没有声明，而是作为全局变量直接声明 所以不是undefined</p><p>2.暗示全局变量</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">function</span> <span class="title function_">test1</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> a=b=<span class="number">1</span>;<span class="comment">//在函数内部声明var a,将1赋给b 再将b的值给a,并未在函数内声明b，所以b为全局变量</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">test1</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">//b在此处是全局变量,</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">a</span>);<span class="comment">//</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>未被定义的变量放于typeof中 是不会报引用错误的 而是返回undefined</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">test6</span>());<span class="comment">//2</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">test6</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        v=<span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> v=<span class="number">2</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> v;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">v</span>); <span class="comment">//undefined</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="作用域，作用域链，基础闭包"><a href="#作用域，作用域链，基础闭包" class="headerlink" title="作用域，作用域链，基础闭包"></a>作用域，作用域链，基础闭包</h3><p>1.对象当中有些属性是我们无法访问的,js引擎内部固有的隐式属性 scope</p><ul><li>他是函数创建时，生成的一个js引擎内部的隐式属性</li><li><p>函数作用域链的存储容器，而作用域链中存储的就是ao go </p><ul><li>ao:函数的执行期上下文</li><li>go:全局的执行期上下文</li></ul></li><li><p>函数执行完成以后：ao是要被销毁的 ao是一个即时的存储容器，根据函数的执行期来决定</p></li></ul><p><img src="https://cdn.staticaly.com/gh/mxy-23/picgo@main/img/image-20210915090338969.png" alt="image-20210915090338969"></p><p><img src="https://cdn.staticaly.com/gh/mxy-23/picgo@main/img/image-20210915090524646.png" alt="image-20210915090524646"></p><p>巧妙的解释了一下：内部的函数能够访问到外部的（全局的函数），而外部的函数不能够访问到内部的函数的数据</p><p><img src="https://cdn.staticaly.com/gh/mxy-23/picgo@main/img/image-20210915091520843.png" alt="image-20210915091520843"></p><p><img src="C:\Users\21906\AppData\Roaming\Typora\typora-user-images\image-20210915091750278.png" alt="image-20210915091750278"></p><p><img src="https://cdn.staticaly.com/gh/mxy-23/picgo@main/img/image-20210915092109156.png" alt="image-20210915092109156"></p><p><img src="https://cdn.staticaly.com/gh/mxy-23/picgo@main/img/image-20210915092205844.png" alt="image-20210915092205844"></p><p>==当函数被定义时，scope-》作用域链-》go 已经存在了 在函数被执行时生成自己的ao==</p><h4 id="闭包："><a href="#闭包：" class="headerlink" title="闭包："></a>闭包：</h4><p><img src="https://cdn.staticaly.com/gh/mxy-23/picgo@main/img/image-20210915095844617.png" alt="image-20210915095844617"></p><p><img src="https://cdn.staticaly.com/gh/mxy-23/picgo@main/img/image-20210915095343004.png" alt="image-20210915095343004"></p><p><img src="https://cdn.staticaly.com/gh/mxy-23/picgo@main/img/image-20210915102334946.png" alt="image-20210915102334946"></p><p><img src="https://cdn.staticaly.com/gh/mxy-23/picgo@main/img/image-20210915103350206.png" alt="image-20210915103350206"></p><p>当内部函数返回到外部并保存时，一定会产生闭包；</p><p>闭包会产生原来的作用域链不被释放，过度的闭包会导致内存泄漏，加载过慢；</p><p>闭包可以做一个数据缓存;</p><p>==当 <strong>内部函数</strong> 被返回，外部并保存时，一定会产生闭包，闭包会使原来的作用域链不释放 （它被返回出去的时候 它死死的抓住上一级AO）（因为，内部函数被定义时，是在外部函数环境下，所以内部函数这时的作用域链有外部函数执行期的作用域链）==</p><h3 id="立即执行函数（iife-inmidately-invoked-function-expression-）"><a href="#立即执行函数（iife-inmidately-invoked-function-expression-）" class="headerlink" title="立即执行函数（iife-inmidately invoked function expression ）"></a>立即执行函数（iife-inmidately invoked function expression ）</h3><p>1.立即执行，执行完成后立即释放函数(初始化函数)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    (<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">    &#125;())<span class="comment">//w3c建议</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> num=(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> a+b;</span></span><br><span class="line"><span class="language-javascript">    &#125;)(<span class="number">2</span>,<span class="number">3</span>); <span class="comment">//立即执行函数有返回值，需要一个变量来接收</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.一定是表达式才能被执行符号（）执行 （）里面的东西都会变成表达式</p><p>3.立即执行函数不需要用到函数名，不像函数表达式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    +<span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;(); <span class="comment">//在function前面加上+后，函数声明变成了表达式</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">a</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;(<span class="number">6</span>);<span class="comment">//不报错 也不执行 js引擎把（6）当做是一个表达式</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">a</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;();<span class="comment">//会报错 语法错误 不是表达式 没有办法立即执行</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//逗号运算符只返回最后一个值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>+<span class="number">1</span>,<span class="number">25</span>);<span class="comment">//返回25</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">test5</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> arr=[];</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">            arr[i]=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">document</span>.<span class="title function_">write</span>(i+<span class="string">&quot; &quot;</span>);<span class="comment">//此时并没有执行</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> arr;<span class="comment">//myAr拿到的是最后一次i的值，即10</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> myArr=<span class="title function_">test5</span>(); <span class="comment">//test5()执行完成后，其中的i已经变成了10  test5中的ao被arr里的10个函数拽住</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;<span class="number">10</span>;j++)&#123;</span></span><br><span class="line"><span class="language-javascript">        myArr[j]();</span></span><br><span class="line"><span class="language-javascript">    &#125;<span class="comment">//输出的结果为10 10 10............</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//让浏览器输出 0 1 2 3 4 5 6 7 8 9</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> arr=[];</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">            (<span class="keyword">function</span>(<span class="params">j</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                arr[j]=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">document</span>.<span class="title function_">write</span>(j+<span class="string">&quot; &quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)(i);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> arr;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> myArr=<span class="title function_">test</span>();</span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;<span class="number">10</span>;j++)&#123;</span></span><br><span class="line"><span class="language-javascript">        myArr[j]();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>写一个构造函数，接受数字类型的参数，参数数量不定，完成参数相加和相乘的功能</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">function</span> <span class="title function_">Computate</span>(<span class="params">opt</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">num</span> = opt.<span class="property">num</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">add</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> sum = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;<span class="variable language_">this</span>.<span class="property">num</span>.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">                    sum += <span class="variable language_">this</span>.<span class="property">num</span>[i];</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(sum);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">aMultiply</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> accumulate = <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="variable language_">this</span>.<span class="property">num</span>.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">                    accumulate *= <span class="variable language_">this</span>.<span class="property">num</span>[i];</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(accumulate);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> compute = <span class="keyword">new</span> <span class="title class_">Computate</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">num</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">        compute.<span class="title function_">add</span>();</span></span><br><span class="line"><span class="language-javascript">        compute.<span class="title function_">aMultiply</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="实例化原理"><a href="#实例化原理" class="headerlink" title="实例化原理"></a>实例化原理</h3><p>1.this在没有实例化的时候，指的是window ;生成了实例对象后，指的是当前对象本身</p><p>2.this在不同的实例中的指向不同</p><p>3.<strong>var car=new Car(“red”.”Benz”);</strong>当实例化一个对象时，会在构造函数内部加上一个（生成了this）</p><p>ao={</p><p>this:{}</p><p>}</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var car=new Car(&quot;red&quot;.&quot;Benz&quot;);</span><br><span class="line">function Car(color,brand)&#123;</span><br><span class="line">this.color=color;</span><br><span class="line">this.brand=brand;</span><br><span class="line"></span><br><span class="line">//return  this;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function Car(color,brand)&#123;</span><br><span class="line">var me=&#123;&#125;;</span><br><span class="line">me.color=color;</span><br><span class="line">me.brand=color;</span><br><span class="line">return me;</span><br><span class="line">&#125;</span><br><span class="line">var car= Car(&quot;red&quot;.&quot;Benz&quot;); //没有用到new关键词 也能够达到相同的效果 本质上和普通函数没有任何区别</span><br><span class="line">console.log(car.color);</span><br><span class="line">console.log(car.brand);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">Car</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">color</span>=<span class="string">&quot;red&quot;</span>;;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">brand</span>=<span class="string">&quot;benz&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> <span class="string">&quot;123&quot;</span>;<span class="comment">//当这里return的是原始值（NUMBER STRING UNDEFINED）时，无效；但是当return的是引用值时（[],&#123;&#125;,function test()&#123;&#125;）时，后面console.log(car.color)就是undefined</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> car=<span class="keyword">new</span> <span class="title class_">Car</span>();</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(car.<span class="property">color</span>)<span class="comment">//输出的结果为red</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="js包装类"><a href="#js包装类" class="headerlink" title="js包装类"></a>js包装类</h3><p>1.原始值并没有自己的属性和方法</p><ul><li>new Number( )</li><li>new String( )</li><li>new Boolean( )</li></ul><p>2.undefined和null不可以设置任何的属性方法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(undefined.length)//报错</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a=123;//原始值-&gt;数字</span><br><span class="line">a.len=3;</span><br><span class="line">//相当于 new Number(123).len=3; 但是没有变量去保存这个值 系统就把new Number(123)给删掉（delete）</span><br></pre></td></tr></table></figure><p>3.数组能被截断,而字符串不能被截断</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var arr=[1,2,3];</span><br><span class="line">arr.length=2;</span><br><span class="line">console.log(arr);//输出为[1,2]</span><br><span class="line"></span><br><span class="line">var str=&quot;abc&quot;;</span><br><span class="line">str.length=1;</span><br><span class="line">console.log(str);//显示abc</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">function</span> <span class="title function_">Test</span>(<span class="params">a,b,c</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> d = <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">a</span> = a;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">b</span> = b;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">c</span> = c;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">d++;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(d); <span class="comment">//先d++再打印的d,所以加了1</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">g</span> = f;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//return this; --&gt; 闭包</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> test1 = <span class="keyword">new</span> <span class="title class_">Test</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">test1.<span class="title function_">g</span>(); <span class="comment">//2</span></span></span><br><span class="line"><span class="language-javascript">test1.<span class="title function_">g</span>(); <span class="comment">//3</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> test2 = <span class="keyword">new</span> <span class="title class_">Test</span>();</span></span><br><span class="line"><span class="language-javascript">test2.<span class="title function_">g</span>(); <span class="comment">//2</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> x = <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">            y = z = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">n</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> n = n + <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        y = <span class="title function_">add</span>(x); <span class="comment">//2</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">n</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> n = n + <span class="number">3</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        z = <span class="title function_">add</span>(x); <span class="comment">//4</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(x, y, z); <span class="comment">// 1 4 4</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//预编译：</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//GO = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//x:1,</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//y:0,</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//z:0,</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//add:function add(n)&#123;return n = n + 3&#125; //覆盖了 所以最后执行的都是这一函数体</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//&#125;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//全局上下文 函数提升 变量声明提升</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 同样的名称放到同样的地方去覆盖</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">Computate</span>(<span class="params">opt</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">num</span> = opt.<span class="property">num</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">add</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> sum = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;<span class="variable language_">this</span>.<span class="property">num</span>.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">                    sum += <span class="variable language_">this</span>.<span class="property">num</span>[i];</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(sum);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">aMultiply</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> accumulate = <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="variable language_">this</span>.<span class="property">num</span>.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">                    accumulate *= <span class="variable language_">this</span>.<span class="property">num</span>[i];</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(accumulate);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> compute = <span class="keyword">new</span> <span class="title class_">Computate</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">num</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">        compute.<span class="title function_">add</span>();</span></span><br><span class="line"><span class="language-javascript">        compute.<span class="title function_">aMultiply</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">Cars</span>(<span class="params">opt</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">brand</span> = opt.<span class="property">brand</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">color</span> = opt.<span class="property">color</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">displacement</span> = opt.<span class="property">displacement</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;brand:&#x27;</span> + <span class="variable language_">this</span>.<span class="property">brand</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;color:&#x27;</span> + <span class="variable language_">this</span>.<span class="property">color</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;displacement:&#x27;</span> + <span class="variable language_">this</span>.<span class="property">displacement</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">function</span> <span class="title function_">Customer</span>(<span class="params">opt</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">name</span> = opt.<span class="property">name</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">age</span> = opt.<span class="property">age</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">income</span> = opt.<span class="property">income</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">choose</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">               </span></span><br><span class="line"><span class="language-javascript">                </span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;age:&#x27;</span> + <span class="variable language_">this</span>.<span class="property">age</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;income:&#x27;</span> + <span class="variable language_">this</span>.<span class="property">income</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">               <span class="keyword">var</span> car = <span class="keyword">new</span> <span class="title class_">Cars</span>(opt.<span class="property">cars</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">               <span class="variable language_">console</span>.<span class="title function_">log</span>( <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;购买了一辆&#x27;</span> + car.<span class="property">color</span> + <span class="string">&#x27;的&#x27;</span> +  car.<span class="property">brand</span> + <span class="string">&#x27;排量是&#x27;</span> + car.<span class="property">displacement</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> customer1 = <span class="keyword">new</span> <span class="title class_">Customer</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>:<span class="string">&#x27;lili&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">age</span>:<span class="number">21</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">income</span>:<span class="number">23425</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">cars</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">brand</span>:<span class="string">&#x27;奔驰&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">color</span>:<span class="string">&#x27;pink&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">displacement</span>:<span class="number">5</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        customer1.<span class="title function_">choose</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">Car</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> <span class="variable language_">this</span>=&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">__proto__</span>:<span class="variable constant_">XXXXXX</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Car</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span>=<span class="string">&quot;benz&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">Car</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> car=<span class="keyword">new</span> <span class="title class_">Car</span>(); <span class="comment">//实例化的时候并没有修改prototype 实例化之前的prototypr保存在constructor对应的构造函数当中</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Car</span>.<span class="property"><span class="keyword">prototype</span></span>=&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>:<span class="string">&quot;mezad&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(car);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Car</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;Benz&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">Car</span>(<span class="params"></span>)&#123;&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> car = <span class="keyword">new</span> <span class="title class_">Car</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Car</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;Mazda&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(car.<span class="property">name</span>); <span class="comment">//Benz</span></span></span><br><span class="line"><span class="language-javascript">解析</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// fucntion Car()&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// this&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//__proto__:Car.prototype &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//name:&#x27;Benz&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// </span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// Car.prototype.cunstructor  -&gt; Car() -&gt; prototype -&gt; name:&#x27;Mazda&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="JS插件开发初始"><a href="#JS插件开发初始" class="headerlink" title="JS插件开发初始"></a>JS插件开发初始</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    (<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">Test</span>(<span class="params"></span>)&#123;&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">Test</span> = <span class="title class_">Test</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;)();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> test = <span class="keyword">new</span> <span class="title class_">Test</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>==立即执行函数里面写一个构造函数<br>将这个构造函数保存到window上的一个变量==</p><ul><li>一个自启动函数，插件的标配</li></ul><p>作业：写一个插件<br>任意传两个数字，调用插件内部方法可进行加减乘除功能</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    ;(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">Compute</span>(<span class="params">opt</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">a</span> = opt.<span class="property">a</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">b</span> = opt.<span class="property">b</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Compute</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">add</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> sum = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">sum = <span class="variable language_">this</span>.<span class="property">a</span> + <span class="variable language_">this</span>.<span class="property">b</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum);</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">reduce</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> red = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">red = <span class="variable language_">this</span>.<span class="property">a</span> - <span class="variable language_">this</span>.<span class="property">b</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(red);</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">mul</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> acc = <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">acc = <span class="variable language_">this</span>.<span class="property">a</span> * <span class="variable language_">this</span>.<span class="property">b</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(acc);</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">divide</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> shang;</span></span><br><span class="line"><span class="language-javascript">shang = <span class="variable language_">this</span>.<span class="property">a</span> / <span class="variable language_">this</span>.<span class="property">b</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(shang);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">Compute</span> = <span class="title class_">Compute</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;)();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> compute = <span class="keyword">new</span> <span class="title class_">Compute</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">a</span>:<span class="number">20</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">b</span>:<span class="number">4</span></span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">compute.<span class="title function_">add</span>();</span></span><br><span class="line"><span class="language-javascript">compute.<span class="title function_">reduce</span>();</span></span><br><span class="line"><span class="language-javascript">compute.<span class="title function_">mul</span>();</span></span><br><span class="line"><span class="language-javascript">compute.<span class="title function_">divide</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="原型深入"><a href="#原型深入" class="headerlink" title="原型深入"></a>原型深入</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//面试题：</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Professor</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">tSkill</span> = <span class="string">&#x27;JAVA&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">Professor</span>(<span class="params"></span>)&#123;&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> professor = <span class="keyword">new</span> <span class="title class_">Professor</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Teacher</span>.<span class="property"><span class="keyword">prototype</span></span> = professor;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">Teacher</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">mSkill</span> = <span class="string">&#x27;JS/JQ&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">success</span> = &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">alibaba</span>:<span class="string">&#x27;28&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">tencent</span>:<span class="string">&#x27;30&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> teacher = <span class="keyword">new</span> <span class="title class_">Teacher</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span> = teacher;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">pSkill</span> = <span class="string">&#x27;HTML/CSS&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> student = <span class="keyword">new</span> <span class="title class_">Student</span>();</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//这样更改他的父级元素（就是他老师的属性）行不行</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//再验证一下这条语句会不会在student里面加一个新的success属性，然后这个属性对应一个对象，teacher里头的会不会被复制过来，且里头写上百度</span></span></span><br><span class="line"><span class="language-javascript">student.<span class="property">success</span>.<span class="property">baidu</span> = <span class="string">&#x27;100&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(teacher,student);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//这两个打印有没有变化？</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//teacher的加上了</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//他没有赋值到student实例里边，他赋值到实例的原型里边（这是因为你teacher变了，你把teacher赋值到Student.prototype,所以他在实例的对象原型里）</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//学生可以修改teacher的引用值属性</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Professor</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">tSkill</span> = <span class="string">&#x27;JAVA&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">Professor</span>(<span class="params"></span>)&#123;&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> professor = <span class="keyword">new</span> <span class="title class_">Professor</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Teacher</span>.<span class="property"><span class="keyword">prototype</span></span> = professor;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">Teacher</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">mSkill</span> = <span class="string">&#x27;JS/JQ&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">students</span> = <span class="number">500</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> teacher = <span class="keyword">new</span> <span class="title class_">Teacher</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span> = teacher;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">pSkill</span> = <span class="string">&#x27;HTML/CSS&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> student = <span class="keyword">new</span> <span class="title class_">Student</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">student.<span class="property">students</span>++;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(teacher,student);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//这两个打印有没有变化？</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//老师不变，学生的增加了一个students属性值为501</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//学生不能去修改teacher的原始值属性，但是它会将teacher。students复制下来，他认为你想给student增加一个students属性</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// student.students = student.students + 1 (student.students取值，因为往上找能找到为500 所以是500+1)</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">Car</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;Benz&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Car</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">brand</span>:<span class="string">&#x27;Mazda&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">intro</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是&#x27;</span> + <span class="variable language_">this</span>.<span class="property">brand</span> + <span class="string">&#x27;车&#x27;</span>); </span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span>  car = <span class="keyword">new</span> <span class="title class_">Car</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//new了：</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//function Car()&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//var this = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//brand:&#x27;Benz&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//这个时候要调用intro方法，但是我对象里头没有。所以就到原型里面去找</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//Car.ptototype--&gt; intro() 里的this指向对象本身，刚好我对象里头有brand 所以打印出Benz</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//&#125;</span></span></span><br><span class="line"><span class="language-javascript">car.<span class="title function_">intro</span>(); <span class="comment">//Benz</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>==普通的函数默认返回undefined==</p><p>原型的原型是Object构造出来的（new Object）</p><p>构造函数</p><p>Object.create(对象/null) //必须得放内容，二选一</p><ul><li><strong>功能：你可以指定对象原型</strong>，(里面放你想要的原型）可以 自定义原型</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">Obj</span>(<span class="params"></span>)&#123;&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Obj</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">num</span> = <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> obj1 = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Obj</span>.<span class="property"><span class="keyword">prototype</span></span>); </span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> obj2 = <span class="keyword">new</span> <span class="title class_">Obj</span>();</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1);</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2); </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>他们两个其实是一样的，对象原型、构造函数都是一样的<br>new的工作：</p><ul><li>实例化obj2</li><li>调用构造函数Obj的初始化属性和方法</li><li>指定实例对象的原型 <strong>proto</strong>:Obj.prototype</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//创建obj1空对象 </span><br><span class="line">var obj1 = Object.create(null); //完全空的，对象原型都没了__proto__</span><br></pre></td></tr></table></figure><p>把一个对象作为另一个对象的原型存在 用creat函数</p><p>==是不是所有的对象都应该继承 Object.prototype 呢？==<br>不是，Object.create(null)这种对象就不会继承</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> obj=<span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span></span><br><span class="line"><span class="language-javascript">    obj.<span class="property">num</span>=<span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> obj1=&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">count</span>:<span class="number">2</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    obj.<span class="property">__proto__</span>=obj1;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">count</span>); <span class="comment">//返回结果为undefined __proto__必须得是系统内置的，你可以更改，但是不能自己造</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="undefined-null-能不能使用toString"><a href="#undefined-null-能不能使用toString" class="headerlink" title="undefined null 能不能使用toString()?"></a>undefined null 能不能使用toString()?</h5><p>不能，undefined和null不能经过包装类，且他们没有原型</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> num = <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">num.<span class="title function_">toString</span>(); <span class="comment">//1</span></span></span><br><span class="line"><span class="language-javascript">这个可以是因为它经过了包装类</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">那为什么<span class="title class_">Number</span>要有一个自己的<span class="title function_">toString</span>()，而不继承<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>里面的<span class="title function_">toString</span>()</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 方法的重写，因为Object的不满足需求</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> num = <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> obj = &#123;&#125;;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> obj3 = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">write</span>(num);</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">write</span>(obj);</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">write</span>(obj3); <span class="comment">//报错</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//document.write()打印的时候有一个隐式转换，转换成string</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="call和apply"><a href="#call和apply" class="headerlink" title="call和apply"></a>call和apply</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;test&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">test</span>(); <span class="comment">//隐式加上了test.call()</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">Car</span>(<span class="params">brand,color</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">brand</span>=brand;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">color</span>=color;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> newCar=&#123;&#125;;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Car</span>.<span class="title function_">call</span>(newCar,<span class="string">&quot;benz&quot;</span>,<span class="string">&quot;red&quot;</span>); <span class="comment">//call将this改成了newCar</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Car</span>.<span class="title function_">apply</span>(newCar,[<span class="string">&quot;benz&quot;</span>,<span class="string">&quot;red&quot;</span>]) <span class="comment">//更改this的指向</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(newCar);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="圣杯模式"><a href="#圣杯模式" class="headerlink" title="圣杯模式"></a>圣杯模式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">Teacher</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">name</span>=<span class="string">&quot;mr li&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">tSkill</span>=<span class="string">&quot;java&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Teacher</span>.<span class="property"><span class="keyword">prototype</span></span>=&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">pSkill</span>:<span class="string">&quot;js/JQ&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> t=<span class="keyword">new</span> <span class="title class_">Teacher</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(t);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">name</span>=<span class="string">&quot;mr Wang&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">BUffer</span>(<span class="params"></span>)&#123;&#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Buffer</span>.<span class="property"><span class="keyword">prototype</span></span>=<span class="title class_">Teacher</span>.<span class="property"><span class="keyword">prototype</span></span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> buffer=<span class="keyword">new</span> <span class="title class_">Buffer</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>=buffer;</span></span><br><span class="line"><span class="language-javascript">    student.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">age</span>=<span class="number">18</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> s=<span class="keyword">new</span> <span class="title class_">Student</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>==当中的buffer就被当做是圣杯，将一些东西放到圣杯当中去，Student要用的时候去buffer中拿==</p><p>css圣杯模式，双飞翼</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">inherit</span>(<span class="params">Target,Origin</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">Buffer</span>(<span class="params"></span>)&#123;&#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Buffer</span>.<span class="property"><span class="keyword">prototype</span></span>=<span class="title class_">Origin</span>.<span class="property"><span class="keyword">prototype</span></span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Target</span>.<span class="property"><span class="keyword">prototype</span></span>=<span class="keyword">new</span> <span class="title class_">Buffer</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Target</span>.<span class="property">ptototype</span>.<span class="property">constructor</span>=<span class="title class_">Target</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Target</span>.<span class="property">protootype</span>.<span class="property">super_class</span>=<span class="title class_">Origin</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>企业级模块化</strong>(防止变量污染全局)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> inherit=(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> <span class="title class_">Buffer</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">Target,,Origin</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"> <span class="title class_">Buffer</span>.<span class="property"><span class="keyword">prototype</span></span>=<span class="title class_">Origin</span>.<span class="property"><span class="keyword">prototype</span></span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Target</span>.<span class="property"><span class="keyword">prototype</span></span>=<span class="keyword">new</span> <span class="title class_">Buffer</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Target</span>.<span class="property">ptototype</span>.<span class="property">constructor</span>=<span class="title class_">Target</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Target</span>.<span class="property">protootype</span>.<span class="property">super_class</span>=<span class="title class_">Origin</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)();</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>==写代码是一门艺术==</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> initPro=(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> <span class="title class_">Pro</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">Prog</span>.<span class="property"><span class="keyword">prototype</span></span>=&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>:<span class="string">&quot;程序员&quot;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">tool</span>:<span class="string">&quot;计算机&quot;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">work</span>:<span class="string">&quot;编写应用程序&quot;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">duration</span>:<span class="number">10</span>个小时</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">say</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是一名&quot;</span>+<span class="variable language_">this</span>.<span class="property">myName</span>+<span class="variable language_">this</span>.<span class="property">name</span>+<span class="string">&quot;我的工作是用&quot;</span>+<span class="variable language_">this</span>.<span class="property">tool</span>+<span class="variable language_">this</span>.<span class="property">work</span>+<span class="string">&quot;我的工作需要用到&quot;</span>+<span class="variable language_">this</span>.<span class="property">lang</span>.<span class="title function_">toString</span>()+<span class="string">&quot;.&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">Front</span>(<span class="params"></span>)&#123;&#125;;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">End</span>(<span class="params"></span>)&#123;&#125;;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">inherit</span>(<span class="title class_">Front</span>,<span class="title class_">Pro</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">inherit</span>(<span class="title class_">End</span>,<span class="title class_">Pro</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Front</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">lang</span>=[<span class="string">&quot;html&quot;</span>,<span class="string">&quot;css&quot;</span>,<span class="string">&quot;js&quot;</span>];</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Front</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myName</span>=<span class="string">&quot;前端&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">End</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">lang</span>=[<span class="string">&quot;java&quot;</span>,<span class="string">&quot;javaweb&quot;</span>];</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">End</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myName</span>=<span class="string">&quot;后端&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> obj=&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">Front</span>:<span class="title class_">Front</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">End</span>:<span class="title class_">End</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> obj;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)();</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> front=<span class="keyword">new</span> initPro.<span class="title class_">Front</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> <span class="title class_">End</span>=<span class="keyword">new</span> initPro.<span class="title class_">End</span>();</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    front.<span class="title function_">say</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>年龄为多少岁姓名为XX买了一辆排量为XX的什么颜色的什么牌子的车 call apply</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">Cars</span>(<span class="params">opt</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">brand</span> = opt.<span class="property">brand</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">color</span> = opt.<span class="property">color</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">displacement</span> = opt.<span class="property">displacement</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">function</span> <span class="title function_">Customer</span>(<span class="params">opt</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title class_">Cars</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>,opt);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">name</span> = opt.<span class="property">name</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">age</span> = opt.<span class="property">age</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">income</span> = opt.<span class="property">income</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>. resultInfo = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span> + <span class="string">&#x27;的&#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27;购买了一辆&#x27;</span> + <span class="variable language_">this</span>.<span class="property">color</span> + <span class="string">&#x27;的&#x27;</span> +  <span class="variable language_">this</span>.<span class="property">brand</span> + <span class="string">&#x27;排量是&#x27;</span> + <span class="variable language_">this</span>.<span class="property">displacement</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> customer1 = <span class="keyword">new</span> <span class="title class_">Customer</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>:<span class="string">&#x27;lili&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">age</span>:<span class="number">21</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">income</span>:<span class="number">23425</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">brand</span>:<span class="string">&#x27;奔驰&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">color</span>:<span class="string">&#x27;pink&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">displacement</span>:<span class="number">5</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        customer1.<span class="title function_">resultInfo</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> car=&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">brand</span>:<span class="string">&quot;benz&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">color</span>:<span class="string">&quot;Red&quot;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> car)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(car.<span class="property">key</span>);<span class="comment">//返回结果为undefined</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//js引擎的处理方法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//car.key-&gt;car[&quot;key&quot;]-&gt;undefined</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(car[key]);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>判断一个变量是否是数组的方法?</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> a;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">constructor</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(a <span class="keyword">instanceof</span> <span class="title class_">Array</span>);<span class="comment">//true</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> str=<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(a); <span class="comment">//object Array</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>=&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">toString</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            a.<span class="title function_">toString</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>函数内的this指向<br>函数的 不同调用方式 决定了 this的指向不同</li></ol><ul><li><p>普通函数——this 指向window</p></li><li><p>对象的方法——this 指向的是对象</p></li><li><p>构造函数——this 指向实例对象</p></li><li><p>（原型对象里面的this 也指向这个实例对象）</p></li><li><p>绑定事件函数——this 指向这个函数的调用者</p></li><li><p>定时器函数——this 指向的是window</p></li><li><p>立即执行函数——this 指向的是window</p></li></ul><p>2.改变函数内this的指向</p><h6 id="1-call方法"><a href="#1-call方法" class="headerlink" title="1. call方法"></a>1. call方法</h6><ol><li>可以调用函数</li><li>可以改变函数的this指向</li></ol><ul><li>主要应用：<strong>实现继承</strong></li></ul><h6 id="2-apply方法"><a href="#2-apply方法" class="headerlink" title="2. apply方法"></a>2. apply方法</h6><ol><li>可以调用函数</li><li>可以改变函数的this指向</li><li>注意：它的参数必须是数组（伪数组）</li></ol><ul><li>主要应用：例如我们可以利用apply借助于数学内置对象求数组最大值</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">a,b,c</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>.<span class="property">callee</span>.<span class="property">length</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(test.<span class="property">length</span>); <span class="comment">//形参的数量3</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>.<span class="property">length</span>);<span class="comment">//打印实参的数量</span></span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">test</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>callee的用法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> sum=(<span class="keyword">function</span>(<span class="params">n</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span>(n&lt;=<span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">         <span class="keyword">return</span> <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">         &#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span>  n+<span class="variable language_">arguments</span>.<span class="title function_">callee</span>(n-<span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;)(<span class="number">10</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">test1</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">test2</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">test2</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(test2.<span class="property">caller</span>); <span class="comment">//caller 调用当前函数的函数引用</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>JS中可能的返回值有什么？</p><p>object(null)/boolean/number/string/undefined/function</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> a=<span class="number">5</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        a=<span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//0</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>);<span class="comment">//5 没有实例化 this指向全局</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> a;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a);<span class="comment">//0</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">test</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> a=<span class="number">5</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        a=<span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//0</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>);<span class="comment">//undefined 实例化了 但是里面没有a这个属性</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> a;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a);<span class="comment">//0</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">new</span> <span class="title function_">test</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="三目运算符-对象克隆-浅拷贝-深拷贝"><a href="#三目运算符-对象克隆-浅拷贝-深拷贝" class="headerlink" title="三目运算符 对象克隆 浅拷贝 深拷贝"></a>三目运算符 对象克隆 浅拷贝 深拷贝</h3><p>==模块化开发的好处：让立即执行函数保存在一个全局变量当中，可以随时去调用，因为立即执行函数执行完就销毁==</p><h4 id="三元运算符（？：）"><a href="#三元运算符（？：）" class="headerlink" title="三元运算符（？：）"></a>三元运算符（？：）</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> str=<span class="number">89</span>&gt;<span class="number">9</span>?(<span class="string">&quot;89&quot;</span>&gt;<span class="string">&quot;9&quot;</span>?<span class="string">&quot;通过了&quot;</span>:<span class="string">&quot;内层未通过&quot;</span>):<span class="string">&quot;外层未通过&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">//&quot;89&quot; &quot;9&quot; 当中有一个是数字类型的话则会发生隐式类型转换</span><br><span class="line">//字符串的比较 从第一位开始比ASCII码 相等则比较后面的字符 不等的话立即停止比较</span><br></pre></td></tr></table></figure><h4 id="对象的克隆"><a href="#对象的克隆" class="headerlink" title="对象的克隆"></a>对象的克隆</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> person1=&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">age</span>:<span class="number">8</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">sex</span>:<span class="string">&quot;male&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> person2=person1;<span class="comment">//将perosn1的引用值传给了person2 都指向同一个存储空间</span></span></span><br><span class="line"><span class="language-javascript">    person2.<span class="property">name</span>=<span class="string">&quot;李四&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(person1,person2); <span class="comment">//输出的person1 person2的对象的name都是李四，</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> person1=&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">age</span>:<span class="number">8</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">sex</span>:<span class="string">&quot;male&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> person2=&#123;&#125;;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> person1)&#123;</span></span><br><span class="line"><span class="language-javascript">        person2[key]=person1[key];</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    person.<span class="property">name</span>=<span class="string">&quot;李四&quot;</span>；</span></span><br><span class="line"><span class="language-javascript">     <span class="variable language_">console</span>.<span class="title function_">log</span>(person1,person2); <span class="comment">//输出的结果为person1.name=张三 person2.name=李四 次现象为浅拷贝</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js基础</title>
      <link href="/post/6890f50f.html"/>
      <url>/post/6890f50f.html</url>
      
        <content type="html"><![CDATA[<h3 id="js-学习三部分内容：ECMAScript-DOM-BOM"><a href="#js-学习三部分内容：ECMAScript-DOM-BOM" class="headerlink" title="js(学习三部分内容：ECMAScript+DOM+BOM)"></a>js(学习三部分内容：ECMAScript+DOM+BOM)</h3><h3 id="helloworld"><a href="#helloworld" class="headerlink" title="helloworld"></a>helloworld</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&quot;这是我的第一行代码,哥,你真的帅&quot;</span>);<span class="comment">//控制浏览器弹出一个警告框</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;你是真的帅&quot;</span>);<span class="comment">//向body中输出一个内容</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hhhhhhh&quot;</span>);<span class="comment">//向控制台输出一个内容</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 将js代码写入标签的onclick属性中 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;哈哈哈哈哈&#x27;)&quot;</span>&gt;</span>大帅逼<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 将js代码写超链接的href属性中，点击超链接时，会执行js代码 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(&#x27;gun&#x27;)&quot;</span>&gt;</span>hhhhhhhh<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 以上两种不推荐使用，不方便维护  最好写在script标签当中或者外部文件引用--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 新建一个js文件 在进行引入 &lt;script type=&quot;text/javascript&quot; src=&quot;.....js&quot;&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>==script标签一旦引入外部文件， 就不能够在编写代码，即使编写了浏览器也会忽略==</p><h3 id="Js的基本语法"><a href="#Js的基本语法" class="headerlink" title="Js的基本语法"></a>Js的基本语法</h3><p>js当中严格区分大小写</p><p>语句以分号结尾（如果不写分号，浏览器会自动添加，但是会消耗一些系统资源，但是有些时候会加错分号）</p><p>js忽略多个空格和换行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字面量和变量</span></span><br><span class="line">字面量：不可改变的值（常量） 可以直接使用 但是一般不会直接使用字面量</span><br><span class="line">变量可以用来保存字面量</span><br><span class="line">使用<span class="keyword">var</span>来声明一个变量;</span><br><span class="line"></span><br><span class="line"><span class="comment">//标识符:可以自主命名 数字 字母 下划线</span></span><br><span class="line">不能是es中的关键字或者保留字</span><br><span class="line">一般都采用驼峰命名 首字母小写 每个单词的开头字母大写 其余字母小写</span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串</span></span><br><span class="line"><span class="title class_">String</span> <span class="title class_">Number</span> <span class="title class_">Boolean</span> <span class="title class_">Bull</span> <span class="title class_">Undefined</span> <span class="title class_">Object</span> <span class="title class_">Js</span>中的六种数据类型 其中<span class="title class_">Object</span>属于引用数据类型</span><br><span class="line">在js当中字符串需要使用单引号引起来 </span><br><span class="line">使用双引号或单引号都可以</span><br><span class="line">在字符串可以使用\作为转义字符</span><br><span class="line"></span><br><span class="line"><span class="comment">//数值类型（整数 浮点数）</span></span><br><span class="line">js中可以表示数字的最大值（<span class="title class_">Number</span>.<span class="property">MAX_VALUE</span>）</span><br><span class="line">如果使用number超过了最大数字 则返回<span class="title class_">Infinity</span> 表示正无穷</span><br><span class="line"><span class="title class_">NaN</span> 表示的不是一个数字 ，类型返回的也是number </span><br><span class="line">js可以表示数字的最小值（<span class="title class_">Number</span>.<span class="property">MIN_VALUE</span>）</span><br><span class="line">不要使用js进行对精确度比较高的运算</span><br><span class="line"> <span class="comment">//null和undefined</span></span><br><span class="line"><span class="literal">null</span>这个值用于表示一个空的对象</span><br><span class="line">当声明一个变量 但是并不给变量赋值时 他的值就是<span class="literal">undefined</span>（未定义）</span><br></pre></td></tr></table></figure><h4 id="强制类型转换-String（转换成String类型）"><a href="#强制类型转换-String（转换成String类型）" class="headerlink" title="强制类型转换-String（转换成String类型）"></a>强制类型转换-String（转换成String类型）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>调用被转换数据类型的<span class="title function_">toString</span>().方法 该方法不会影响原变量 它会将转换的结果返回</span><br><span class="line">a=<span class="literal">null</span>;</span><br><span class="line">a=a.<span class="title function_">toString</span>();会报错</span><br><span class="line"><span class="literal">null</span>和<span class="literal">undefined</span>没有toString方法</span><br><span class="line"><span class="number">2.</span>调用<span class="title class_">String</span>()函数 将转换的数据作为参数传递给函数</span><br><span class="line">使用<span class="title class_">String</span>（）函数做强制类型转换时，对于<span class="literal">null</span>和<span class="literal">undefined</span> 它会将<span class="literal">null</span>转换为“<span class="literal">null</span>” <span class="literal">undefined</span>转换成“<span class="literal">undefined</span>”</span><br></pre></td></tr></table></figure><h4 id="强制类型转换Number"><a href="#强制类型转换Number" class="headerlink" title="强制类型转换Number"></a>强制类型转换Number</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>使用<span class="title class_">Number</span>（）函数</span><br><span class="line">（<span class="number">1</span>）纯数字转换成字符串</span><br><span class="line">（<span class="number">2</span>）字符串中有非数字的内容 则转换成<span class="title class_">NaN</span></span><br><span class="line">（<span class="number">3</span>）空格的字符串 则为<span class="number">0</span></span><br><span class="line">（<span class="number">4</span>）布尔类型转数字 <span class="literal">true</span>-<span class="number">1</span> <span class="literal">false</span>-<span class="number">0</span></span><br><span class="line">（<span class="number">5</span>）<span class="title class_">Null</span>转数字 则为<span class="number">0</span></span><br><span class="line">（<span class="number">6</span>）<span class="literal">undefined</span>转数字 则为<span class="title class_">NaN</span></span><br><span class="line"><span class="number">2.</span>专门用于对付字符串 <span class="built_in">parseInt</span>() <span class="built_in">parseFloat</span>()</span><br><span class="line"><span class="built_in">parseInt</span>() 将一个字符串中的有效的整数内容取出来 然后转换成<span class="title class_">Number</span></span><br><span class="line"><span class="built_in">parseFloat</span>() 将一个字符串的有效浮点数内容取出来 </span><br><span class="line">如果对非<span class="title class_">String</span>使用<span class="built_in">parseInt</span>（）或者<span class="built_in">parseFloat</span>（） 它会先转换成<span class="title class_">String</span>然后在操作</span><br><span class="line"></span><br><span class="line">在<span class="built_in">parseInt</span>（）中传递两个参数 第二个参数表示进制</span><br></pre></td></tr></table></figure><h4 id="强制类型转换Boolean（）"><a href="#强制类型转换Boolean（）" class="headerlink" title="强制类型转换Boolean（）"></a>强制类型转换Boolean（）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">使用<span class="title class_">Boolean</span>（）函数</span><br><span class="line">(<span class="number">1</span>)非<span class="number">0</span>数字调用函数<span class="title class_">Boolean</span>()函数布尔值为<span class="literal">true</span> 除了<span class="number">0</span>和<span class="title class_">NaN</span>,其余的都是<span class="literal">true</span></span><br><span class="line">(<span class="number">2</span>)字符串转布尔，除了空串 都是<span class="literal">true</span></span><br><span class="line">(<span class="number">3</span>)<span class="title class_">NaN</span> 和<span class="literal">undefined</span>都是<span class="literal">false</span></span><br><span class="line">(<span class="number">4</span>)object也会转换成<span class="literal">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>当对非<span class="title class_">Number</span>类型的值进行运算时，会将这些值转换成<span class="title class_">Number</span>然后在进行运算</span><br><span class="line">任何值对<span class="title class_">NaN</span>进行运算都是<span class="title class_">NaN</span></span><br><span class="line"><span class="number">2.</span>如果对多个字符串进行加法运算 则会将字符串进行拼接</span><br><span class="line">任何的值和字符串做加法 都会先转换成字符串 在进行拼串的操作</span><br><span class="line"><span class="number">3.</span>将任意数据类转换成<span class="title class_">String</span>的一个方法 我们只需要将任意数据类型+“” 是一种隐式的类型转换</span><br><span class="line">例:<span class="keyword">var</span> c=<span class="number">123</span>; c=c+<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="number">4.</span>任何值做减法 乘法 除法 都会自动转化成<span class="title class_">Number</span> </span><br><span class="line">我们可以利用这一点 做隐式的转换 通过一个值-<span class="number">0</span> *<span class="number">1</span> /<span class="number">1</span> 将其转换成<span class="title class_">Number</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/mxy-23/picgo@main/img/image-20210809213828413.png" alt="image-20210809213828413"></p><h4 id="一元运算符（只需要一个操作数）"><a href="#一元运算符（只需要一个操作数）" class="headerlink" title="一元运算符（只需要一个操作数）"></a>一元运算符（只需要一个操作数）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>正号：正号不会对数字产生任何影响</span><br><span class="line"><span class="number">2.</span>负号：负号对数字产生取反的操作 </span><br><span class="line"><span class="number">3.</span>对于非<span class="title class_">Number</span>值 先转换成<span class="title class_">Number</span> 在进行运算</span><br><span class="line">可以对其他的一个数据类型用+ 将其转换成<span class="title class_">Number</span> 和<span class="title class_">Number</span>（）函数一样 隐式的类型转换</span><br></pre></td></tr></table></figure><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> ！非：对非布尔值操作 会将其转换成布尔值 然后再进行取反 可以利用这一特点 将其他的值转换成布尔类型，对其进行两次取反</span><br><span class="line"><span class="number">2.</span>&amp;&amp; 与</span><br><span class="line"><span class="number">3.</span>|| 或</span><br><span class="line">对于非布尔值进行与或操作  会将其先转换成布尔值 然后在运算并且返回原值</span><br><span class="line">与运算：如果第一个值为<span class="literal">true</span> 则直接返回第二个值/如果第一个值为<span class="literal">false</span> 则直接返回第一个值</span><br><span class="line">或运算：如果第一个值为真 则直接返回第一个值/如果第一个值为<span class="literal">false</span> 则直接返回第二个值</span><br></pre></td></tr></table></figure><h4 id="关系运算符（-gt-lt-等）"><a href="#关系运算符（-gt-lt-等）" class="headerlink" title="关系运算符（&gt; &lt; 等）"></a>关系运算符（&gt; &lt; 等）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">对于非数值的情况，进行比较，会先将其转换成数字 然后在比较 <span class="number">1</span>&gt;<span class="string">&quot;0&quot;</span></span><br><span class="line">如果符号两侧的值都是字符串 不会将其转换数字进行比较 只会比较字符对应的unicode编码</span><br><span class="line">比较字符编码是一位一位进行比较，<span class="string">&quot;abc&quot;</span>和<span class="string">&quot;b&quot;</span> 如果两位一样 则比较下一位</span><br><span class="line">任何值和<span class="title class_">NaN</span>进行比较 都是<span class="literal">false</span> </span><br></pre></td></tr></table></figure><p>在字符串中使用转义字符 \u  输入Unicode编码</p><p>在网页当中 使用unicode编码   &amp;#编码 ； 这里的编码是十进制 可用电脑自带的计算器进行数值转换 </p><h4 id="相等运算符"><a href="#相等运算符" class="headerlink" title="相等运算符"></a>相等运算符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">当使用== !=来比较两个值时，如果值的类型不同，会先转化成相同的类型，在进行比较 </span><br><span class="line"><span class="literal">undefined</span>衍生自<span class="literal">null</span> 所以<span class="literal">undefined</span>==<span class="literal">null</span> 为<span class="literal">true</span></span><br><span class="line"><span class="title class_">NaN</span>不和任何值相等 包括它自己</span><br><span class="line">可以通过一个函数<span class="built_in">isNaN</span>（）来判断一个值是否是<span class="title class_">NaN</span></span><br><span class="line"></span><br><span class="line">===:全等</span><br><span class="line">他不会进行类型转换 如果两个值类型不同 他直接返回<span class="literal">false</span></span><br><span class="line">！==：不全等</span><br><span class="line">用来判断两个值是否不全等 如果两个值类型不同 他直接返回<span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">条件表达式？语句一:语句二;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/mxy-23/picgo@main/img/image-20210812165908808.png" alt="image-20210812165908808"></p><h4 id="流程控制语句if"><a href="#流程控制语句if" class="headerlink" title="流程控制语句if"></a>流程控制语句if</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">prompt</span>()可以弹出一个提示框，该提示框中带有一个文本框，用户可以在文本框中输入一段内容，该函数需要一个字符串作为参数，该字符串用作提示的文字 该函数的返回值是<span class="title class_">String</span>类型</span><br><span class="line">用户输入的内容会作为函数的返回值，可以定义一个变量来接收该内容</span><br></pre></td></tr></table></figure><p>==需要注意的是js中的/操作符如果两侧是整数，它会当做浮点数进行运算，不会整除，它会保留小数==</p><p>==正确的取整方式需要借助parseInt()方法==（源自于水仙花案例）</p><p>break关键字用于退出swiitch或者循环语句，if当中不能单独使用，会立即终止离他最近的循环语句</p><p>可以为循环语句创建一个label，来表示当前的循环，这样break会结束指定的循环，而不是最近的循环</p><p>continue跳过当次的循环</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">测试程序的性能</span><br><span class="line">在程序执行前，开启计时器</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">time</span>() 可以开启一个计时器 </span><br><span class="line">他需要一个字符串作为参数，这个字符串是计时器的标识</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">timeEnd</span>() 用来停止一个计时器</span><br></pre></td></tr></table></figure><p>Math.sqrt()对一个数进行开方</p><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>读取的对象中没有的属性，不会报错，而是会返回undefined</p><p>delete 对象.属性名：可以用于删除一个属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">向对象中添加属性不强制要求遵守标识符规范，什么都可以，但是尽量不要使用</span><br><span class="line">如果要使用特殊的属性名，需要使用以下方式</span><br><span class="line">对象[<span class="string">&quot;属性名&quot;</span>]=属性值，读取时也要采用这种方法</span><br><span class="line">使用[]去操作属性更为灵活，在[]中可以直接传递一个变量，可以直接读取这个属性</span><br><span class="line"><span class="keyword">var</span> n=<span class="string">&quot;123&quot;</span>;obj[<span class="string">&quot;123&quot;</span>]=<span class="number">789</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[n])相当于<span class="variable language_">console</span>.<span class="title function_">log</span>(obj[<span class="string">&quot;123&quot;</span>]) n可以随意修改 更为灵活 推荐使用</span><br><span class="line"></span><br><span class="line">对象的属性值，可以是任意的类型，甚至也可以是一个对象</span><br><span class="line"><span class="keyword">in</span>运算符可以检查一个对象中是否有指定的属性 有则返回<span class="literal">true</span> </span><br><span class="line">语法:<span class="string">&quot;属性名&quot;</span> <span class="keyword">in</span> 对象</span><br><span class="line"></span><br><span class="line">js中的变量都是保存在栈内存中的</span><br><span class="line">基本数据类型的值直接在栈内存中保存 ，值与值之间是独立存在的，修改一个变量不会影响其他变量的值</span><br><span class="line">对象是保存到堆内存中的，每创建一个对象，就会在堆内存中开辟出一个新的空间，对象保存的是内存地址（对象的引用） 对对象进行赋值，两个对象保存的是同一个对象的引用</span><br><span class="line"></span><br><span class="line">当比较两个基本数据类型的值时，就是比较值</span><br><span class="line">而比较两个引用数据类型值时，比较的是内存的地址，即使两个对象是一样的，但是地址不同，他也会返回<span class="literal">false</span></span><br><span class="line"></span><br><span class="line">对象字面量:创建一个对象</span><br><span class="line"><span class="keyword">var</span> a=<span class="keyword">new</span> <span class="title class_">Object</span>(); 与<span class="keyword">var</span> a=&#123;&#125;;等价</span><br><span class="line">使用对象字面量，在创建对象时，直接指定对象中的属性</span><br><span class="line">语法:&#123;属性名:属性值, 属性名:属性值.......&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数，也是一个对象 var 变量名=new Function()</span></span><br><span class="line">封装到函数中的代码不会立即执行，函数中的代码会在函数调用的时候执行</span><br><span class="line">调用语法:函数对象()</span><br><span class="line"></span><br><span class="line">使用函数声明来创建一个函数</span><br><span class="line"><span class="keyword">function</span> 函数名(形参)</span><br><span class="line"></span><br><span class="line">使用函数表达式来创建一个函数</span><br><span class="line"><span class="keyword">var</span> 函数名=<span class="keyword">function</span>(<span class="params">形参</span>)----匿名函数对象</span><br><span class="line"></span><br><span class="line">调用函数解析器时它不会检查实参的类型，要注意是否可能接收到非法的参数</span><br><span class="line">调用函数是，也不会解析实参的数量，多余实参不会被赋值，实参少于形参的数量，则没有对应实参的形参是<span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">函数名():调用函数</span><br><span class="line">函数名:函数对象</span><br><span class="line"></span><br><span class="line">函数的返回值可以是任意的类型，可以是对象，也可以是函数</span><br><span class="line"></span><br><span class="line">立即执行函数</span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;我是一个匿名对象&quot;</span>);</span><br><span class="line">&#125;)();  </span><br><span class="line"></span><br><span class="line">对象的属性值也可以是个函数，函数作为对象的属性时，称为对象的方法</span><br><span class="line"></span><br><span class="line">枚举对象中的属性</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> n <span class="keyword">in</span>对象)&#123;&#125; 每次执行，会将属性名赋值给变量n</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> n <span class="keyword">in</span> object)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;属性值&quot;</span>+obj[n]); <span class="comment">//不能写成obj.n</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>全局作用域：写在script标签中的js代码中，全局作用域在页面打开时创建，在页面关闭时销毁</span><br><span class="line">全局对象<span class="variable language_">window</span>，代表浏览器的窗口</span><br><span class="line">在全局作用域中，创建的所有变量都会作为<span class="variable language_">window</span>对象的属性保存</span><br><span class="line">创建的函数都会作为<span class="variable language_">window</span>的方法保存</span><br><span class="line"></span><br><span class="line">变量的声明提前:</span><br><span class="line">使用<span class="keyword">var</span>关键声明的变量，会在所有代码执行之前被声明，但是如果声明变量不加<span class="keyword">var</span>关键字，则变量不会被提前声明;</span><br><span class="line"></span><br><span class="line">函数的声明提前:</span><br><span class="line">使用函数声明创建的函数 <span class="keyword">function</span> 函数名() 会在所有代码执行之前被创建</span><br><span class="line"><span class="title function_">fun2</span>();</span><br><span class="line"><span class="keyword">var</span> fun2=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;  &quot;</span>);</span><br><span class="line">&#125;<span class="comment">//此代码执行会报错，变量fun2会被提前声明，但是没有赋值，不能在声明之前调用</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>函数作用域</span><br><span class="line">调用函数时创建函数作用域，执行完毕后，函数作用域销毁，每调用一次函数就会创建一个新的函数作用域</span><br><span class="line">在函数作用域中，可以访问到全局作用域的变量;在全局作用域中无法访问到函数作用域</span><br><span class="line">当在函数作用域中操作一个变量，它会先在自身作用域中寻找，之后再寻找上一级作用域</span><br><span class="line">再函数作用域中，使用<span class="keyword">var</span>关键字声明的变量，会在函数中所有代码执行之前被声明，函数声明也会在所有的代码执行之前被声明</span><br><span class="line">在函数中不使用<span class="keyword">var</span>声明的变量 都会成为全局变量</span><br><span class="line">定义形参就相当于在函数作用域中声明了变量</span><br></pre></td></tr></table></figure><p>this：浏览器在每次调用函数每次都会向函数内部传递进一个隐含的参数，这个隐含的参数就是this，this指向的是一个对象，根据函数的调用方式不同，this会指向不同的对象</p><p>==以函数形式调用，this永远都是window;以方法的形式调用，this就是调用方法的对象;==</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//使用工厂方法创建对象:大批量创建对象</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/mxy-23/picgo@main/img/image-20210813221706985.png" alt="image-20210813221706985"></p><p>要区分多钟不同类型的对象，需要使用构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个构造函数</span></span><br><span class="line">构造函数和普通函数的区别，普通函数是直接调用，构造函数是使用<span class="keyword">new</span>关键字来调用</span><br><span class="line">构造函数的执行流程:创建一个新的对象;</span><br><span class="line">将新建的对象设置为函数中的<span class="variable language_">this</span>,在构造函数中使用<span class="variable language_">this</span>来引用新建的对象</span><br><span class="line">执行函数的代码;</span><br><span class="line">将新建的对象作为返回值返回;</span><br><span class="line"></span><br><span class="line">使用<span class="keyword">instanceof</span> 可以检查一个对象是否是一个类的实例 对象 <span class="keyword">instanceof</span> 类</span><br><span class="line"></span><br><span class="line">如何使所有的对象共享同一个方法：如下图（将方法在全局作用域中定义）</span><br></pre></td></tr></table></figure><p><img src="C:\Users\21906\AppData\Roaming\Typora\typora-user-images\image-20210813223833125.png" alt="image-20210813223833125"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">将函数定义在全局作用域，污染全局作用域的命名空间，而且也不安全</span><br><span class="line"></span><br><span class="line"><span class="comment">//原型对象 prototype</span></span><br><span class="line">我们所创建的每一个函数，解析器都会向函数中添加一个属性prototype,这个属性是一个对象</span><br><span class="line">当函数作为构造函数调用，它所创建的对象中都会有一个隐含的属性，指向该构造函数的原型对象</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/mxy-23/picgo@main/img/image-20210813224623581.png" alt="image-20210813224623581"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">我们可以通过_proto_来访问该属性</span><br><span class="line"></span><br><span class="line">原型对象就相当于一个公共的区域，所有同一个类中的实例都可以访问到这个原型对象,我们可以将对象中共有的内容，统一设置到原型对象当中去；当我们访问对象的属性或者方法时，先在自身对象中寻找，如果有，则直接使用，没有的话找原型对象</span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/mxy-23/picgo@main/img/image-20210813225403183.png" alt="image-20210813225403183"></p><p>以后再创建函数时，可以将这些对象共有的属性和方法添加到构造函数的原型对象中，这样不用为每一个对象添加，也不会影响到全局作用域</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用<span class="keyword">in</span>检查对象中是否含有某个属性，如果对象中没有但是原型中有，也会返回<span class="literal">true</span></span><br><span class="line">可以使用<span class="title function_">hasOwnProperty</span>()检查对象自身的属性：只有对象自身有该属性才能返回<span class="literal">true</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.staticaly.com/gh/mxy-23/picgo@main/img/image-20210813230709182.png" alt="image-20210813230709182"></p><h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h4><p><img src="https://cdn.staticaly.com/gh/mxy-23/picgo@main/img/image-20210821105931535.png" alt="image-20210821105931535"></p><p>输出的结果是object Object ？为什么？</p><p><strong>当我们直接在页面中打印一个对象时，实际上输出的对象是toString()方法的返回值，console.log(per)和console.（per.toString()）是一致的</strong></p><p><strong>如果我们希望在输出对象时不输出object Object ,可以为对象添加一个toString()方法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改person原型的toSting()方法</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">toString</span>()=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这样所有person的实例的toString()方法都跟着变化了</span></span><br></pre></td></tr></table></figure><h4 id="垃圾回收（GC）"><a href="#垃圾回收（GC）" class="headerlink" title="垃圾回收（GC）"></a>垃圾回收（GC）</h4><p>就像人生活的时间长了会产生垃圾一样，程序运行也会产生垃圾，这些垃圾积攒过多，会导致程序运行速度变慢，所以我们需要一个垃圾回收机制，来处理程序运行产生的垃圾。</p><p>当一个对象没有任何变量或属性对他进行引用，此时我们无法操作该对象，此时这种对象就是垃圾，过多会导致占用大量内存空间，导致程序运行变慢，所以这种必须进行清理。在js中有自动的垃圾回收机制，会自动将这些垃圾对象从内存中销毁，我们不需要也不能进行垃圾回收的操作。</p><p>我们需要做的就是将不再使用的对象设置为null即可</p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h4 id="数组简介"><a href="#数组简介" class="headerlink" title="数组简介"></a>数组简介</h4><p>1.数组也是一个对象，不同的是普通对象是使用字符串作为属性名的，而数组是使用数字来作为索引操作元素</p><p>索引是从0开始的数字</p><p>2.数组的存储性能比普通对象要好，在开发中经常使用数组才存储一些数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法如下：</span></span><br><span class="line"><span class="comment">//1.创建数组对象</span></span><br><span class="line"><span class="keyword">var</span> arr=<span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line"><span class="comment">//使用typeof检查数组时，会返回object</span></span><br><span class="line"><span class="comment">//2.向数组中添加元素:数组[索引]=值</span></span><br><span class="line">arr[<span class="number">0</span>]=<span class="number">10</span>;</span><br><span class="line"><span class="comment">//3.读取数组中的元素：如果读取不存在的索引返回undefined</span></span><br><span class="line">arr[<span class="number">0</span>],arr[<span class="number">1</span>].....</span><br><span class="line"><span class="comment">//4.获取数组长度：对于连续的数组，使用length属性获取数组长度;对于非连续的数组，使用length，返回最大索引+1，尽量不要创建非连续的数组</span></span><br><span class="line">arr.<span class="property">length</span></span><br><span class="line"><span class="comment">//5.修改length:如果修改的length大于原长度，多出来的部分会空出来;如果修改的length小于原长度，多出来的部分会被删除</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//6.向数组的最后一个位置添加元素:即为length 语法如下：数组[数组.length]=值</span></span><br><span class="line">arr[arr.<span class="property">length</span>]</span><br></pre></td></tr></table></figure><h4 id="数组字面量"><a href="#数组字面量" class="headerlink" title="数组字面量"></a>数组字面量</h4><p>1.使用字面量创建数组,可以在创建时就指定数组中的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br></pre></td></tr></table></figure><p>2.使用构造函数创建数组时，也可以添加元素，将要添加的元素作为构造函数的参数传递，元素之间用逗号隔开,较少使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr2=<span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>);</span><br></pre></td></tr></table></figure><p>3.创建一个数组中，只有一个元素10</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr=[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><p>4.创建一个长度为10的数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr2=<span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>5.数组中元素可以是任意的数据类型,也可以是对象,也可以是一个函数,也可以放数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr=[<span class="string">&quot;hello&quot;</span>,<span class="number">1</span>,<span class="literal">true</span>,<span class="literal">null</span>];</span><br><span class="line"><span class="keyword">var</span> obj=&#123;<span class="attr">name</span>:<span class="string">&quot;孙悟空&quot;</span>&#125;</span><br><span class="line">arr[arr.<span class="property">length</span>]=obj;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">4</span>].<span class="property">name</span>);<span class="comment">//对象</span></span><br><span class="line">arr=[<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="title function_">alert</span>(<span class="string">&quot;hello&quot;</span>)&#125;,<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="title function_">alert</span>(<span class="string">&quot;hello2&quot;</span>)&#125;];<span class="comment">//函数</span></span><br></pre></td></tr></table></figure><h4 id="数组的方法"><a href="#数组的方法" class="headerlink" title="数组的方法"></a>数组的方法</h4><p>1.push():该方法用于向数组添加一个或多个元素，并<strong>返回数组新的长度</strong>，可以将这些元素作为方法的参数传递，这样这些元素将会自动添加到数组的末尾</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="title function_">push</span>(elementary1,elementary2.....);</span><br></pre></td></tr></table></figure><p>2.pop()该方法可以删除数组最后一个元素,将<strong>删除的元素作为返回值</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="title function_">pop</span>();</span><br></pre></td></tr></table></figure><p>3.unshift()：向数组开头添加一个或多个元素，并<strong>返回新的长度</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="title function_">unshift</span>(<span class="string">&quot;牛魔王&quot;</span>.....);</span><br></pre></td></tr></table></figure><p>4.shift():删除并返回数组的第一个元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="title function_">shift</span>();</span><br></pre></td></tr></table></figure><h4 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h4><p>1.所谓的数组遍历，就是将数组中的所有元素都取出来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.<span class="property">length</span>;i++)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>练习：判断一数组Person对象是否大于18，将大于18的对象放到一个新的数组当中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getAdult</span>(<span class="params">Arr</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> newArr=[];</span><br><span class="line">    <span class="comment">//遍历arr,将Person对象取出来</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> p=arr[i];</span><br><span class="line">        <span class="comment">//判断是否大于18</span></span><br><span class="line">        <span class="keyword">if</span>(p.<span class="property">age</span>&gt;=<span class="number">18</span>)&#123;</span><br><span class="line">            <span class="comment">//如果大于18，则将这个对象添加到newArr中</span></span><br><span class="line">            <span class="comment">//将对象放入到新数组</span></span><br><span class="line">            newArr.<span class="title function_">push</span>(p);</span><br><span class="line">        </span><br><span class="line">           </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="forEach方法"><a href="#forEach方法" class="headerlink" title="forEach方法"></a>forEach方法</h4><p>1.这个方法只支持IE8以上的浏览器，该方法需要一个函数作为参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//像这种函数，由我们创建，但是不由我们调用，我们称为回调函数，函数执行的次数为数组中元素的个数每次执行时，浏览器会将遍历到的元素，以实参的形式传递进来，我们可以定义形参来读取这些内容</span></span><br><span class="line"><span class="comment">//浏览器会在回调函数中传递三个参数</span></span><br><span class="line"><span class="comment">//第一个参数，就是正在遍历的元素</span></span><br><span class="line"><span class="comment">//第二个参数，就是正在遍历元素的索引</span></span><br><span class="line"><span class="comment">//第三个参数，就是我们正在遍历的数组</span></span><br></pre></td></tr></table></figure><h4 id="slice-和splice-方法"><a href="#slice-和splice-方法" class="headerlink" title="slice()和splice()方法"></a>slice()和splice()方法</h4><p>1.slice()方法可以用来从数组中提取指定元素:<strong>该方法不会改变原数组</strong>，而是将截取到的元素封装到一个新数组中返回</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法</span></span><br><span class="line">arrayObject.<span class="title function_">slice</span>(start,end);</span><br></pre></td></tr></table></figure><p>参数：截取开始的位置的索引，包含开始索引；截取结束位置的索引，不包含结束索引</p><p>第二个参数省略不写，截取从开索引往后的所有元素；</p><p>如果传递一个负值，则从后往前计算。-1表示倒数第一个</p><p>2.splice()方法：用于删除数组中指定元素，<strong>使用splice()会影响到原数组</strong>，会将指定元素从原数组中删除</p><p>并将删除的元素作为返回值返回，<strong>并向数组中添加新元素</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrayObject.<span class="title function_">splice</span>(index,howmany,item1,.....,itemX)</span><br></pre></td></tr></table></figure><p>参数：</p><p>第一个参数：表示开始位置索引</p><p>第二个参数：表示删除的数量，设置为0，不会删除</p><p>第三个参数：可选，传递一些新的元素，这些元素会自动插入到开始位置索引前边</p><h4 id="数组去重练习"><a href="#数组去重练习" class="headerlink" title="数组去重练习"></a>数组去重练习</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取数组中的每一个元素</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.<span class="property">length</span>;i++)&#123;</span><br><span class="line">    <span class="comment">//console.log(arr[i]);</span></span><br><span class="line">    <span class="comment">//获取当前元素后的所有元素</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j=i+<span class="number">1</span>;j&lt;arr.<span class="property">length</span>;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i]==arr[j])&#123;</span><br><span class="line">            <span class="comment">//出现重复元素，删除arr[j]</span></span><br><span class="line">            arr.<span class="title function_">splice</span>(j,<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//删除了当前j所在的元素之后，后边的元素会自动补位，此时将不会在比较这个元素，而我们需要在比较一次j所在的位置，正确的做法是是j自减</span></span><br><span class="line">            j--;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数组的剩余方法"><a href="#数组的剩余方法" class="headerlink" title="数组的剩余方法"></a>数组的剩余方法</h4><p>1.concat()方法用于连接两个或者多个数组，并将新的数组返回，该方法不会对原数组产生影响</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arrayObject.<span class="title function_">concat</span>(arrayX,arrayX,......,arrayX)</span><br></pre></td></tr></table></figure><p>2.join()方法可将数组转换成一个字符串，该方法不会对原数组产生影响，而是将转换后的字符串作为结果返回，在join()中可以指定一个字符串作为参数，这个字符串将会成为数组中元素的连接符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arr=[<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>];</span><br><span class="line">result=arr.<span class="title function_">join</span>(<span class="string">&quot;hello&quot;</span>);<span class="comment">//hello为连接符</span></span><br></pre></td></tr></table></figure><p>3.reverse()方法用于颠倒元素顺序，该方法会直接修改原数组</p><p>4.sort()方法用于数组元素进行排序，会影响原数组，默认按unicode编码排序</p><p>即使对于纯数字的数组，使用sort()进行排序，也会按照unicode编码来排序，所以对数字进行排序可能会的到错误的排序。</p><p>我们可以<strong>自己来指定排序的规则</strong>，在sort()中添加一个回调函数</p><ul><li><p>回调函数中需要定义两个形参；</p></li><li><p>浏览器将会分别使用数组中的元素作为实参去调用回调函数，使用哪个元素不确定，但是肯定的是在数组    a一定在b前边；</p></li><li><p>浏览器会根据回调函数的返回值来决定元素的顺序，如果返回一个大于0的值，则元素会交换位置；如果返回一个小于0的值，则位置不变；如果返回0，则两个元素相等，也不交换位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">arr=[<span class="number">5</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">    <span class="comment">/*if(a&gt;b)&#123;</span></span><br><span class="line"><span class="comment">        return 1;//前边的大交换位置</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    else if(a&lt;b)&#123;</span></span><br><span class="line"><span class="comment">        return -1;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    else&#123;</span></span><br><span class="line"><span class="comment">        return 0;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="keyword">return</span> a-b;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//如果需要升序排列：则返回a-b;降序排列则返回b-a</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="call-和apply-函数对象的方法"><a href="#call-和apply-函数对象的方法" class="headerlink" title="call()和apply()函数对象的方法"></a>call()和apply()函数对象的方法</h4><p>1.需要<strong>通过函数对象来调用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;我是fun函数&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fun</span>();</span><br><span class="line">fun.<span class="title function_">call</span>();</span><br><span class="line">fun.<span class="title function_">apply</span>();</span><br></pre></td></tr></table></figure><p>2.在调用call和apply可以将一个对象指定为第一个参数，此时这个对象会成为函数执行时的this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj=&#123;<span class="attr">name</span>:<span class="string">&quot;1&quot;</span>,<span class="attr">sayName</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2=&#123;<span class="attr">name</span>:<span class="string">&quot;2&quot;</span>&#125;;</span><br><span class="line">fun.<span class="title function_">apply</span>(obj2);</span><br><span class="line">obj.<span class="property">sayName</span>.<span class="title function_">apply</span>(obj2);</span><br></pre></td></tr></table></figure><p>3.Call()方法可以将实参在对象之后依次传递</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params">a,,b</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a=&quot;</span>+a);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b=&quot;</span>+b);</span><br><span class="line">&#125;</span><br><span class="line">fun.<span class="title function_">call</span>(obj,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="comment">//得到的结果 a=2 b=3</span></span><br></pre></td></tr></table></figure><p>4.apply()方法需要将实参封装到一个数组中统一传递</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun.<span class="title function_">apply</span>(obj,[<span class="number">2</span>,<span class="number">3</span>]);</span><br></pre></td></tr></table></figure><p>5.this的情况</p><p>以函数形式调用时，this是window；以方法形式调用，this是调方法的对象</p><p>以构造函数形式调用，this是新创建的那个对象；使用Call和appply调用时，this是指定的那个对象</p><h4 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h4><p>1.在调用函数时，浏览器每次都会传递两个隐含的参数</p><ul><li>函数的上下文对象：this</li><li>封装实参的对象arguments:他是一个类数组对象,可以通过索引来操作数据，也可以获取长度</li><li>在我们调用函数时，所传递的实参都会封装到arguments中，arguments.length可以用来获取实参的长度，即使不定义形参，也可以通过arguments来使用实参，但是较为麻烦</li><li>arguments有一个属性叫做callee，这个属性对应一个函数对象，就是当前正在执行的函数对象</li></ul><p>检查是否是数组：Array.isArray(arguments);</p><h4 id="Date对象"><a href="#Date对象" class="headerlink" title="Date对象"></a>Date对象</h4><p>1.创建一个Date对象,如果直接使用Date对象，则会封装成当前代码执行的时间（Date是一个函数）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="keyword">new</span> <span class="title class_">Date</span>();</span><br></pre></td></tr></table></figure><p>2.创建一个指定的时间对象，需要在构造函数中传递一个指定的字符串作为参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;12/03/2013 11:02:03&quot;</span>);<span class="comment">//日期格式为月/日/年 时:分:秒</span></span><br></pre></td></tr></table></figure><p>3.getDate()获取当前日期对象是几日</p><p>4.getDay()获取当前日期对象是周几，会返回0-6的值，0表示周日</p><p>5.getmMonth()获取当前对象的月份，返回0-11 ，0表示1月，依次类推</p><p>6.getFullYear()获取当前对象的年份</p><p>7.getTime()获取当前对象的时间戳：</p><ul><li><p>时间戳指得是从格林威治标准时间的1970年1月1日0时0分0秒到现在日期所花时间的毫秒数</p></li><li><p>计算机底层在保存时间时使用的都是时间戳</p></li></ul><p>8.获取当前的时间戳：可以用来测试代码执行的性能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">time=<span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br></pre></td></tr></table></figure><h4 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h4><p>1.Math和其他对象不同，它不是一个构造函数，它属于一个工具类不用创建对象，里面封装了数学运算的属性和方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="property">PI</span>表示π</span><br></pre></td></tr></table></figure><p>2.abs()用来计算一个数的绝对值</p><p>3.ceil()可以对一个数进行向上取整，小数位有就自动进1</p><p>4.floor()可以对一个数进行向下取整，小数位会被舍弃</p><p>5.round()可以对一个数进行四舍五入取整</p><p>6.random()可以生成0-1之间的随机数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生成0-x之间的随机数</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">random</span>()*x;</span><br><span class="line"><span class="comment">//生成x-y之间的随机数</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">random</span>()*(y-x)+x</span><br></pre></td></tr></table></figure><p>7.max()可以获取多个数中的最大值，min()获取最小值</p><p>8.pow()：返回x的y次方</p><p>9.sqrt()：对一个数进行开方运算 </p><h4 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h4><p>1.在js中提供了三个包装类，可以将三个基本数据类型转换成对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//String()将基本数据类型转换成String对象</span></span><br><span class="line"><span class="comment">//Number()将基本数据类型转换成Number对象</span></span><br><span class="line"><span class="comment">//Boolean()将基本数据类型转换成Boolean对象</span></span><br></pre></td></tr></table></figure><p>2.在我们实际开发中不会使用基本数据类型的对象，如下所示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>);</span><br></pre></td></tr></table></figure><p>3.对象转换成Boolean值都为true</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b=<span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">if</span>(b)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;我运行了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//以上会弹出&quot;我运行了&quot;？为什么</span></span><br></pre></td></tr></table></figure><p>4.方法和属性只能添加给对象，不能添加给基本数据类型</p><p>当我们对一些基本数据类型的值去调用属性和方法时，浏览器会临时调用包装类将其转换成对象，在调用对象的属性和方法，调用完后在将其转换成基本数据类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s=<span class="number">123</span>;</span><br><span class="line">s=s.<span class="title function_">toString</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;s&quot;</span>);<span class="comment">//123</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> s);<span class="comment">//string</span></span><br><span class="line">s.<span class="property">hello</span>=<span class="string">&quot;nihao&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">hello</span>);<span class="comment">//undefined? 第五行代码将s转换成对象1，第六行代码将s转换成对象2 这两个不是同一个对象</span></span><br></pre></td></tr></table></figure><h4 id="字符串的相关方法"><a href="#字符串的相关方法" class="headerlink" title="字符串的相关方法"></a>字符串的相关方法</h4><p>1.字符串是以字符数组的形式保存的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//length属性获取字符串长度</span></span><br></pre></td></tr></table></figure><p>2.charAt():返回指定位置的字符，根据索引获取，从0开始</p><p>3.charCodeAt():返回指定位置字符的unicode编码</p><p>4.formCharCode():根据字符编码获取字符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line">a=<span class="title class_">String</span>.<span class="title function_">fromCharAt</span>(<span class="number">72</span>);<span class="comment">//H</span></span><br></pre></td></tr></table></figure><p>5.concat():连接两个或多个字符串，不会对原字符串产生影响</p><p>6.indexof()检索一个字符串中是否含有指定内容，没有找到的话会返回-1，找到的话会返回第一次出现的位置</p><p>可以指定第二个参数，为开始查找的位置</p><p>7.lastIndexof()：也可以指定第二个参数</p><ul><li>indexof()是从前往后找</li><li>lastIndexof()是从后往前找</li></ul><p>8.slice()可以截取指定的内容，不会影响原字符串</p><ul><li>第一个参数：开始位置的索引</li><li>第二个参数：结束位置的索引（不包括结束位置）</li><li>如果省略第二个参数，则会截取到后边所有的</li><li>也可以是一个负数作为参数，从后往前数</li></ul><p>9.substring():截取字符串，和slice一样，但是不能接收负值作为参数，如果传递了一个负值，则默认使用0，而且还会自动调整参数的位置，如果第二个参数小于第一个参数，则会自动交换</p><p>10.sunstr():截取字符串</p><ul><li>第一个参数:开始索引的位置</li><li>第二个参数:截取长度</li></ul><p>11.<strong>split()</strong>:将一个字符串拆分成一个数组,参数为字符串，根据该参数来拆分数组</p><p>12.toUpperCase():将字符串转换成大写</p><ol><li>toLowerCase():将字符串转换成小写</li></ol><h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><p>1.用于定义一些字符串的规则，计算机可以根据正则表达式，来检查一个字符串是否符合规则</p><p>2.创建正则表达式对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg=<span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;正则表达式&quot;</span>,<span class="string">&quot;匹配模式&quot;</span>);<span class="comment">//语法</span></span><br><span class="line"><span class="comment">//使用typeof检查正则对象，返回object</span></span><br></pre></td></tr></table></figure><p>3.正则表达式的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">test</span>():检查一个字符串是否符合正则表达式的规则，如果符合则返回<span class="literal">true</span></span><br><span class="line"><span class="keyword">var</span> reg=<span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;a&quot;</span>);<span class="comment">//检查一个字符串中是否含有a,严格区分大小写</span></span><br><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;a&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> result=reg.<span class="title function_">test</span>(str);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>3.在构造函数中传递第二个参数，匹配模式，可以是</p><ul><li>i:忽略大小写</li><li>g:全局匹配模式</li></ul><h4 id="正则表达式的语法"><a href="#正则表达式的语法" class="headerlink" title="正则表达式的语法"></a>正则表达式的语法</h4><p>1.使用字面量创建正则表达式:更加简单 ，使用构造函数更加灵活</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法：var 变量=/正则表达式/匹配模式</span></span><br><span class="line">reg=<span class="regexp">/a/i</span>;</span><br></pre></td></tr></table></figure><p>2.创建一个正则表达式，检查一个字符串中是否含有a或b</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">reg=<span class="regexp">/a|b/</span>;<span class="comment">//使用|表示或者</span></span><br><span class="line"><span class="comment">//[]里的内容也是或者的关系:[ab]=a|b</span></span><br></pre></td></tr></table></figure><p>3.创建一个正则表达式，检查一个字符串中是否含有字母</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[a-z]:表示任意的小写字母</span><br><span class="line">[A-Z]:表示任意的大写字母</span><br><span class="line">[A-z]:表示任意字母</span><br><span class="line">[<span class="number">0</span>-<span class="number">9</span>]:表示任意数字</span><br><span class="line">[^ab]:找除了ab以外的</span><br><span class="line">[^<span class="number">0</span>-<span class="number">9</span>]:除了数字</span><br></pre></td></tr></table></figure><p>4.检查一个字符串中是否含有abc或adc</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg=<span class="regexp">/a[bd]c/</span>;</span><br></pre></td></tr></table></figure><h4 id="字符串和正则相关的方法"><a href="#字符串和正则相关的方法" class="headerlink" title="字符串和正则相关的方法"></a>字符串和正则相关的方法</h4><p>1.split():将一个字符串拆分成一个数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据任意字母拆分字符串：方法中可以传递一个正则表达式去拆分</span></span><br><span class="line"><span class="keyword">var</span> result=str.<span class="title function_">split</span>(<span class="regexp">/[A-z]/</span>);</span><br></pre></td></tr></table></figure><p>2.search():搜索字符串中是否含有指定内容,如果搜索成功则返回第一次出现的索引，没有的话则返回-1</p><p>3.match():可以根据正则表达式从一个字符串中将符合条件的内容提取出来</p><ul><li>默认情况下match只会找到第一个符合要求的，我们可以设置正则表达式为全局匹配模式，这样就会匹配所有内容；</li><li>可以为一个正则表达式设置多个匹配模式，且顺序无所谓</li><li>match()会将匹配到的内容封装到一个数组中，即便只有一个查询结果</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result=str.<span class="title function_">match</span>(<span class="regexp">/[A-z]/ig</span>);</span><br></pre></td></tr></table></figure><p>4.replace()将字符串指定内容替换成新的内容，默认只替换第一个</p><ul><li>被替换的内容，可以接收正则表达式作为参数</li><li>新的内容</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result=str.<span class="title function_">replace</span>(<span class="regexp">/[A-z]/ig</span>,<span class="string">&quot;&quot;</span>);<span class="comment">//将字母删除</span></span><br></pre></td></tr></table></figure><h4 id="正则表达式的语法（1）"><a href="#正则表达式的语法（1）" class="headerlink" title="正则表达式的语法（1）"></a>正则表达式的语法（1）</h4><p>1.创建一个正则表达式，检查一个字符串中是否含有aaa</p><ul><li>通过量词设置一个字符串出现的次数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/a&#123;3&#125;/</span>; <span class="comment">//&#123;n&#125;出现n次</span></span><br></pre></td></tr></table></figure><ul><li><p>量词只对它的前边的一个内容有作用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">reg =<span class="regexp">/ab&#123;2&#125;/</span>;<span class="comment">//表示的是检查abb 而不是abab</span></span><br><span class="line">reg =<span class="regexp">/(ab)&#123;2&#125;/</span>;<span class="comment">//表示的是检查abab</span></span><br><span class="line">reg=<span class="regexp">/ab(1,3)/</span>;<span class="comment">//&#123;m,n&#125;表示m到n次 &#123;m,&#125;:表示m次以上</span></span><br><span class="line">reg=<span class="regexp">/ab+/</span>;<span class="comment">//+表示至少一个，相当于&#123;1,,&#125;</span></span><br><span class="line">reg=<span class="regexp">/ab*/</span>;<span class="comment">//*表示0或者多个，相当于&#123;0,&#125;</span></span><br><span class="line">reg=<span class="regexp">/ab?/</span>;<span class="comment">//表示0或者1个，相当于&#123;0,1&#125;</span></span><br></pre></td></tr></table></figure></li></ul><p>2.检查一个字符串是否以a开头</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">reg=<span class="regexp">/^a/</span>; <span class="comment">//^表示开头</span></span><br><span class="line">reg=<span class="regexp">/a$/</span>;<span class="comment">//匹配结尾的a</span></span><br><span class="line">reg=<span class="regexp">/^a$/</span>;<span class="comment">//只能是a</span></span><br><span class="line">reg=<span class="regexp">/^a|a$/</span>;<span class="comment">//以a开头或者以a结尾</span></span><br></pre></td></tr></table></figure><p>3.创建一个正则表达式，用来检查一个字符串是否是一个合法的手机号</p><p>手机号的规则：</p><ul><li>11位</li><li>第一位是1；第二位不能是0,1,2；第三位以后是任意数字，但是长度为9</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/^1[3-9][0-9]&#123;9&#125;$/</span>;</span><br></pre></td></tr></table></figure><h4 id="正则表达式的语法（2）"><a href="#正则表达式的语法（2）" class="headerlink" title="正则表达式的语法（2）"></a>正则表达式的语法（2）</h4><p>1.检查一个字符串中是否含有. </p><p><strong>.表示任意字符,在正则表达式中使用\作为转义字符</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/\./</span>;<span class="comment">//\.表示.   \\表示\</span></span><br></pre></td></tr></table></figure><p>2.注意使用构造函数时，由于参数是字符串，而\是字符串转义字符，如果需要使用\，则需要使用\\代替</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg=<span class="regexp">/\\/</span>;</span><br><span class="line">   reg=<span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;\\\\&quot;</span>);<span class="comment">//检查是否含有一个\</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&quot;\\&quot;</span>));</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">reg=<span class="regexp">/\w/</span>:表示任意字母 数字 下划线</span><br><span class="line">reg=<span class="regexp">/\W/</span>;除了字母 数字 下划线</span><br><span class="line">reg=<span class="regexp">/\d/</span>;任意数字</span><br><span class="line">reg=<span class="regexp">/\D/</span>;除了数字</span><br><span class="line">reg=<span class="regexp">/\s/</span>;空格</span><br><span class="line">reg=<span class="regexp">/\S/</span>;除了空格</span><br></pre></td></tr></table></figure><p>3.创建一个正则表达式检查一个字符串中是否含有单词child</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg=<span class="regexp">/\bchild\b/</span>;</span><br></pre></td></tr></table></figure><p>4.接收一个用户的输入，去除字符串前后的空格，<strong>去除空格就是采用””来替换空格</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&quot;    hello      &quot;</span>;</span><br><span class="line">str=str.<span class="title function_">replace</span>(<span class="regexp">/\s/g</span>,<span class="string">&quot;&quot;</span>);<span class="comment">//去除字符串的所有空格</span></span><br><span class="line">str=str.<span class="title function_">replace</span>(<span class="regexp">/^\s*/g</span>,<span class="string">&quot;&quot;</span>);<span class="comment">//去除前面的空格</span></span><br><span class="line">str=str.<span class="title function_">replace</span>(<span class="regexp">/^\s*$/g</span>,<span class="string">&quot;&quot;</span>);<span class="comment">//去除后边的空格</span></span><br><span class="line">str=str.<span class="title function_">replace</span>(<span class="regexp">/^\s*|\s*$/g</span>,<span class="string">&quot;&quot;</span>);<span class="comment">//去除字符串中前后的空格 或者/^\s+|\s+$/g</span></span><br></pre></td></tr></table></figure><h4 id="邮件的正则表达式"><a href="#邮件的正则表达式" class="headerlink" title="邮件的正则表达式"></a>邮件的正则表达式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello .<span class="property">nihao</span> @abc.<span class="property">com</span>.<span class="property">cn</span></span><br></pre></td></tr></table></figure><ul><li>任意的字母 数字 下划线 .   任意的字母 数字 下划线  @ 任意字母数字 .任意字母（2-5位） .任意字母（2-5位</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^\w&#123;<span class="number">3</span>,&#125; (\.\w+)* @ [A-z0-<span class="number">9</span>]+ (\.[A-z]&#123;<span class="number">2</span>,<span class="number">5</span>&#125;)&#123;<span class="number">1</span>,<span class="number">2</span>&#125;$/</span><br></pre></td></tr></table></figure><p>任意字母数字：[A-z0-9] 不能去除下划线 因为下划线的ASCII为95 在A-z之间</p><h3 id="DOM-全称文档对象模型"><a href="#DOM-全称文档对象模型" class="headerlink" title="DOM-全称文档对象模型"></a>DOM-全称文档对象模型</h3><h4 id="什么是DOM"><a href="#什么是DOM" class="headerlink" title="什么是DOM"></a>什么是DOM</h4><ol><li><p>文档：表示的是整个html网页文档</p></li><li><p>对象：将网页中的每一部分转换成了一个对象</p></li><li><p>模型：表示对象之间的关系</p></li><li><p>节点：html标签，属性，文本，注释，整个文档都一个节点（文档节点，元素节点，属性节点，文本节点）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>浏览器已经为我们提供了文档节点，这个对象就是<span class="title class_">Windows</span>属性，可以在页面中直接使用，文档节点表示的是整个网页</span><br><span class="line">&lt;button id=<span class="string">&quot;btn&quot;</span>&gt;我是一个按钮&lt;/button&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//获取btn对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> btn=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//修改按钮文字</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">btn.<span class="property">innerHTML</span>=<span class="string">&quot;我是另一个按钮&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ol><h4 id="事件-交互瞬间）"><a href="#事件-交互瞬间）" class="headerlink" title="事件(交互瞬间）"></a>事件(交互瞬间）</h4><p>1.用户和浏览器之间的交互行为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在事件对应的属性中设置一些js代码，这样在事件被触发时，这些代码会执行</span></span><br><span class="line">&lt;button id=<span class="string">&quot;btn&quot;</span> onclick=<span class="title function_">alert</span>(<span class="string">&quot;这是一个按钮&quot;</span>) &gt;&lt;/button&gt;</span><br><span class="line">这种写法将事件写入html代码中，被称为行为和结构相耦合，不推荐使用</span><br><span class="line"></span><br><span class="line"><span class="comment">//我们可以为按钮的事件绑定对应的处理事件，这种写法我们提倡</span></span><br><span class="line"><span class="number">1.</span>获取按钮对象</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> btn=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>);</span><br><span class="line"><span class="comment">//绑定一个单击事件,单击响应函数</span></span><br><span class="line">btn.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;66666&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="文档的加载"><a href="#文档的加载" class="headerlink" title="文档的加载"></a>文档的加载</h4><p>1.浏览器加载页面的一个顺序</p><p> 按照自上向下的顺序加载的，读取·到一行运行一行，如果将script标签写到<head>内，页面还没有加载，是不能够运行成功的   ；将js代码写在页面的下部，就是为了可以在页面加载完毕后在执行js代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&quot;666&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">onclick</span>=<span class="string">alert(</span>&quot;<span class="attr">这是一个按钮</span>&quot;) &gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">//我们希望alert在页面加载完之后在运行，如何实现</span><br></pre></td></tr></table></figure><p>2.onload()会在页面加载完之后才触发</p><p>为window绑定一个onload事件，该事件对应的响应事件会在页面加载完成之后执行，这样可以确保我们的代码执行时所有的DOM对象都已经加载完毕了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">onload</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&quot;666&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">onclick</span>=<span class="string">alert(</span>&quot;<span class="attr">这是一个按钮</span>&quot;) &gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">//此时button按钮先出来，666在弹出来</span><br></pre></td></tr></table></figure><h4 id="DOM查询（1）"><a href="#DOM查询（1）" class="headerlink" title="DOM查询（1）"></a>DOM查询（1）</h4><p>1.获取元素节点</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> btn=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn01&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            btn.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> bj=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;bj&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;我是北京&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn01&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;bj&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">2.getElementSByTagName()可以根据标签名获取一组对象，这个方法会返回一个类数组对象，所有查询到的元素都会封装到对象中;即使查询到的只有一个，也会封装到一个数组中</span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> btn02=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn02&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            btn02.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">               <span class="keyword">var</span> list=<span class="variable language_">document</span>.<span class="title function_">getElementByTagName</span>(<span class="string">&quot;li&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(list.<span class="property">length</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;list.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(list[i].<span class="property">innerHTML</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">3.getElementByName()根据name属性获取一组节点对象</span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> btn03=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn03&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            btn03.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">               <span class="keyword">var</span> name=<span class="variable language_">document</span>.<span class="title function_">getElementByName</span>(<span class="string">&quot;gender&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(name.<span class="property">length</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">             <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;name.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(list[i].<span class="property">innerHTML</span>);<span class="comment">//innerHTML对于自结束标签，这个属性没有任何意义，返回为空</span></span></span><br><span class="line"><span class="language-javascript">                 <span class="comment">//如果需要读取元素节点的属性，直接使用元素.属性名</span></span></span><br><span class="line"><span class="language-javascript">                 <span class="title function_">alert</span>(name[i].<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">                 <span class="title function_">alert</span>(name[i].<span class="property">className</span>);<span class="comment">//class属性不能采用这种方式，需要使用className</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">              </span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        gender:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span> <span class="attr">class</span>=<span class="string">&quot;hello&quot;</span>&gt;</span>male</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span>&gt;</span>female</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此处犯了一个致命的错误，再写css样式时，遇到;号就结束了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">/按钮实现切换图片/</span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//获取两个按钮</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> pre = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn01&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> next = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn02&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> img = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;img&quot;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> imgArr = [<span class="string">&quot;洗手1.png&quot;</span>, <span class="string">&quot;洗手2.png&quot;</span>, <span class="string">&quot;洗手3.png&quot;</span>];</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//创建一个变量，来保存当前正在显示的图片的索引</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> index = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">             <span class="keyword">var</span> info = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;info&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            info.<span class="property">innerHTML</span> =<span class="string">&quot;一共&quot;</span>+imgArr.<span class="property">length</span>+<span class="string">&quot;张图片&quot;</span>+<span class="string">&quot;当前第&quot;</span>+(index+<span class="number">1</span>)+<span class="string">&quot;张图片&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//为两个按钮绑定单击响应函数</span></span></span><br><span class="line"><span class="language-javascript">            pre.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// img.src=&quot;洗手1.png&quot;;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                index--;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    index = imgArr.<span class="property">length</span> - <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                img.<span class="property">src</span> = imgArr[index];</span></span><br><span class="line"><span class="language-javascript">                 info.<span class="property">innerHTML</span> =<span class="string">&quot;一共&quot;</span>+imgArr.<span class="property">length</span>+<span class="string">&quot;张图片&quot;</span>+<span class="string">&quot;当前第&quot;</span>+(index+<span class="number">1</span>)+<span class="string">&quot;张图片&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            next.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// img.src=&quot;洗手2.png&quot;; </span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                index++;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (index &gt; imgArr.<span class="property">length</span> - <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                    index = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                img.<span class="property">src</span> = imgArr[index];</span></span><br><span class="line"><span class="language-javascript">                 info.<span class="property">innerHTML</span> =<span class="string">&quot;一共&quot;</span>+imgArr.<span class="property">length</span>+<span class="string">&quot;张图片&quot;</span>+<span class="string">&quot;当前第&quot;</span>+(index+<span class="number">1</span>)+<span class="string">&quot;张图片&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//切换图片就是修改src属性</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;洗手1.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn01&quot;</span>&gt;</span> 上一张<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn02&quot;</span>&gt;</span> 下一张<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="DOM查询（2）"><a href="#DOM查询（2）" class="headerlink" title="DOM查询（2）"></a>DOM查询（2）</h4><p>1.获取元素的子节点（通过具体的元素节点调用）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">childNodes属性会获取包括文本节点在内的所有  空白的内容也会当成文本节点，但是注意IE8以下不将空白内容当成节点返回</span><br><span class="line"></span><br><span class="line">children获取当前元素所有的子元素</span><br><span class="line"></span><br><span class="line">firstChild获取当前元素的第一个子节点（包括空白文本节点）</span><br><span class="line"></span><br><span class="line">firstElementChild获取当前元素的第一个子元素：不建议使用，兼容性较差，不支持IE8以下的浏览器</span><br></pre></td></tr></table></figure><p>2.获取父节点和兄弟节点</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.返回元素的父节点：parentNode();</span><br><span class="line">2.innerText:与innerHTML类似，但是会自动将HTML去除</span><br><span class="line">3.previousSibling:前一个兄弟节点，也可能获取空白的文本</span><br><span class="line">4.previousElementSibling:获取前一个兄弟元素，不获取空白文本</span><br><span class="line">5.bj.firstChild.nodevalue:显示结果为北京</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;bj&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">li</span>&gt;</span> 节点的三大属性：nodeName nodeType nodeValue</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">练习：全选练习</span><br><span class="line">关键点:遍历多选框的checked属性，并且设置为true|false 可以设置选中状态 </span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 全选按钮</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> btn=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;checkAllBtn&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> name=<span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&quot;item&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                btn.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    </span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// alert(name.length);</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 遍历name数组</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;name.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">                        name[i].<span class="property">checked</span>=<span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;;</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        你爱好的运动是？<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;checkAllBox&quot;</span> &gt;</span>全选 全不选</span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;item&quot;</span> <span class="attr">value</span>=<span class="string">&quot;足球&quot;</span>&gt;</span>足球</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;item&quot;</span> <span class="attr">value</span>=<span class="string">&quot;篮球&quot;</span>&gt;</span>篮球</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;item&quot;</span> <span class="attr">value</span>=<span class="string">&quot;排球&quot;</span>&gt;</span>排球</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;checkAllBtn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;全选&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;checkNoBtn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;全不选&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;checkRevBtn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;反选&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sendBtn&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">练习：反选按钮</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;name.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">if</span>(item[i].<span class="property">checked</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                                 item[i].<span class="property">checked</span>=<span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">                                 &#125;</span></span><br><span class="line"><span class="language-javascript">                                   <span class="keyword">if</span>(!item[i].<span class="property">checked</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                                 item[i].<span class="property">checked</span>=<span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">                                 &#125;</span></span><br><span class="line"><span class="language-javascript">                                 <span class="comment">//或者换种写法</span></span></span><br><span class="line"><span class="language-javascript">                                 item[i].<span class="property">checked</span>=!item[i].<span class="property">checked</span>;</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                                 &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line">在事件的响应函数中，响应函数是谁，判定的this就是谁</span><br></pre></td></tr></table></figure><h4 id="DOM查询的剩余方法（3）"><a href="#DOM查询的剩余方法（3）" class="headerlink" title="DOM查询的剩余方法（3）"></a>DOM查询的剩余方法（3）</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">1.在document当中就有一个属性body,他就是body的引用</span><br><span class="line">var body=document.body;</span><br><span class="line">2.获取HTML标签 var html=document.documentElement;</span><br><span class="line">3.var all=document.all; //获取页面中的所有元素 尽量不要使用</span><br><span class="line"></span><br><span class="line">4.根据元素的class属性值获取一组对象:只支持ie9以及以上className</span><br><span class="line">返回</span><br><span class="line">var box=document.getElementsByClassName(&quot;box01&quot;)[0];</span><br><span class="line"></span><br><span class="line">5.document.querySelector(&quot;.box1 div&quot;);将选择器作为参数</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        选择这个div</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">虽然IE8中没有getElementClaSSName() 但是可以使用document.querySelector();</span><br><span class="line">使用该方法会返回唯一的一个元素，如果满足条件的有多个，那么他只会返回第一个</span><br><span class="line"></span><br><span class="line">6.document.querySelectorAll(&quot;.box&quot;):会将符合条件的对象封装到数组中，即使符合条件的元素只有一个，他也会返回一个数组</span><br></pre></td></tr></table></figure><h4 id="DOM增删改"><a href="#DOM增删改" class="headerlink" title="DOM增删改"></a>DOM增删改</h4><p>1.createElement():可以用于创建一个元素节点对象，需要一个标签名作为参数</p><p>2.createTextNode()：创建一个文本节点对象 需要一个文本内容作为参数 根据该内容创建文本 返回新的节点</p><p>3.appendChild()：向一个父节点中添加一个子节点</p><p>4.insertBefore(新节点，旧节点）：向指定节点前插入新节点</p><p>5.replaceChild(新节点，旧节点）使用指定的子节点替换已有的子节点</p><p>6.removeChild()：删除子节点(父节点调用）</p><p>==以上父节点调用在没有获取父节点对象的时候，可以成采用bj.parentNode.removeChild();</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">向一个父节点中添加一个子节点除了appendChild()方法</span><br><span class="line">还可以对最原始的innerHTML对象进行修改 city.innerHTML+=&quot;<span class="tag">&lt;<span class="name">li</span>&gt;</span>beijing<span class="tag">&lt;/<span class="name">li</span>&gt;</span>&quot;;</span><br></pre></td></tr></table></figure><p>==for 循环会在页面加载完毕完成之后立即执行，而相应的响应函数会在超链接被点击时才执行==</p><p>==，当响应函数执行时，for循环早已结束。此时的i值与For循环中的i值不是同一个==</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">练习：增删改查练习</span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 点击超链接删除信息</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 首先获取所有超链接信息</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> <span class="title class_">ALLa</span>=<span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;a&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 每个超链接绑定事件</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="title class_">ALLa</span>.<span class="property">length</span>;i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title class_">ALLa</span>[i].<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 在响应函数的最后取消超链接的跳转页面 通过return false</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> tr=<span class="variable language_">this</span>.<span class="property">parentNode</span>.<span class="property">parentNode</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> name=tr.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;td&quot;</span>)[<span class="number">0</span>].<span class="property">innerHTML</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 或者var name=tr.children[0].innerHTML;</span></span></span><br><span class="line"><span class="language-javascript">                  </span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//confirm用于弹出一个带有确认消息的弹出框</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span>(<span class="title function_">confirm</span>(<span class="string">&quot;你确定删除&quot;</span>+name))</span></span><br><span class="line"><span class="language-javascript">                    &#123;</span></span><br><span class="line"><span class="language-javascript">                        tr.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(tr);</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> btn=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            btn.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//获取员工的名字</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> name=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;name&quot;</span>).<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// alert(name);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> dizhi=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;dizhi&quot;</span>).<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> xinshui=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;xinshui&quot;</span>).<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(name+<span class="string">&quot;,&quot;</span>+dizhi+<span class="string">&quot;,&quot;</span>+xinshui);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 创建一个tr</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> tr=<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;tr&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                tr.<span class="property">innerHTML</span>=<span class="string">&quot;&lt;td&gt;&quot;</span>+name+<span class="string">&quot;&lt;/td&gt;&quot;</span>+<span class="string">&quot;&lt;td&gt;&quot;</span>+dizhi+<span class="string">&quot;&lt;/td&gt;&quot;</span>+<span class="string">&quot;&lt;td&gt;&quot;</span>+xinshui+<span class="string">&quot;&lt;/td&gt;&quot;</span>+<span class="string">&quot;&lt;td&gt;&lt;a href=&#x27;javascript:;&#x27;&gt;&quot;</span>+<span class="string">&quot;detele&quot;</span>+<span class="string">&quot;&lt;/a&gt;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span>  employee=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;employee&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> tbody=employee.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;tbody&quot;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">                tbody.<span class="title function_">appendChild</span>(tr);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">&quot;employee&quot;</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">        &lt;<span class="attr">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>name<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>dizhi<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>xinshui<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>缪新勇<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>新建县<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>10000<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;delete?id=01&quot;</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>缪新亮<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>新建县<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>2000<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;delete?id=02&quot;</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>缪玉权<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>新建县<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;delete?id=03&quot;</span>&gt;</span>delete<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>添加新员工<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;word&quot;</span>&gt;</span>name:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;UserName&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;word&quot;</span>&gt;</span>dizhi<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;dizhi&quot;</span> <span class="attr">id</span>=<span class="string">&quot;dizhi&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;word&quot;</span>&gt;</span>xinshui<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;xinshui&quot;</span> <span class="attr">id</span>=<span class="string">&quot;xinshui&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 提交按钮 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="使用DOM来操作样式"><a href="#使用DOM来操作样式" class="headerlink" title="使用DOM来操作样式"></a>使用DOM来操作样式</h4><p>1.通过JS来修改样式 </p><p>语法：元素.style.样式名=样式值</p><p>2.如果在CSS    样式名中含有- 这个在JS中是不合法的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">例如：box.style.background-color=&quot;&quot;  这种写法是不合法的</span><br><span class="line">解决办法是将-去除 采用驼峰命名法 正确的样式名为backgroundColor</span><br></pre></td></tr></table></figure><p>3.通过STYLE修改的属性为内联样式 优先级较高；但是如果在·样式中写了！important，则此时样式会有最高优先级，即使通过JS也不能覆盖样式</p><p>3.通过STYLE读取到的属性 都是内联样式 无法读取样式表中的属性</p><h4 id="读取元素当前的样式"><a href="#读取元素当前的样式" class="headerlink" title="读取元素当前的样式"></a>读取元素当前的样式</h4><p>1.语法：元素.currentStyle.样式名=“”；==这个属性只有IE支持 但是不建议使用==</p><p>2.在其它浏览器中可以使用getComputedStyle(); 需要两个参数</p><ol><li><p>第一个参数：需要获取·样式的元素</p></li><li><p>第二个参数：可以传递一个伪元素，也可以传递一个NULL</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var obj=getComputedStyle(box1,null);//该方法会返回一个对象</span><br><span class="line">alert(obj.width);//可以通过对象.样式名来设置，IE8及以下不支持</span><br></pre></td></tr></table></figure><h4 id="其他样式操作的属性"><a href="#其他样式操作的属性" class="headerlink" title="其他样式操作的属性"></a>其他样式操作的属性</h4><p>1.<em>element</em>.clientHeight  <em>element</em>.clientWidth：返回可视内容的可视高度 宽度，包括内容区和内边距 ==这些属性是可读的 不可修改==</p><p>2.<em>element</em>.offsetHeight <em>element</em>.offsetWidth：返回元素整个的宽度和高度 包括内容 内边距和边框</p><p>3.<em>element</em>.offsetParent：可以获取当前元素的定位父元素 ==它会获取到离当前元素开启了定位 的最近的祖先元素，如果所有的祖先元素都没有开启定位，则返回body==</p><p>4.<em>element</em>.offsetLeft <em>element</em>.offsetTop：当前元素相对于定位元素的水平 垂直偏移量</p><p>5.<em>element</em>.scrollHeight <em>element</em>.scrollWidth：返回元素的宽度 高度（包括滚动区域）</p><p>6.<em>element</em>.scrollLeft ：获取水平滚动条滚动的一个距离</p><p>7.<em>element</em>.scrollTop：获取垂直滚动条滚动的一个距离</p><p>8.==一个等式：scrollHeight-scrollTop=clinetHeight== 说明垂直滚动条滚到底了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">当垂直滚动条时使表单项可用 </span><br><span class="line">onscroll:该事件会在元素的滚动条滚动时出触发</span><br><span class="line">但是在谷歌浏览器中会有小数 滚动条拖到底时也不能触发事件 需要使用parsentInt进行取整</span><br><span class="line">scrollHeight-scrollTop+1&gt;=clientHeight</span><br></pre></td></tr></table></figure><h4 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h4><p>1.onmousemove:鼠标在元素中移动时触发</p><p>2.事件对象：当事件的响应函数被触发时，浏览器每次都会将事件对象作为实参传递给响应函数，在事件对象中封装了一系列的信息，包括鼠标的坐标</p><p>clientX clientY：返回事件被触发时，鼠标的水平，垂直坐标（不支持IE8以及以下）</p><p>==在IE8中，响应函数被触发时，浏览器不会传递事件对象，是将事件对象作为window对象的属性保存的==</p><p>event=event||window.event： 兼容所有的浏览器的写法</p><h4 id="div跟随鼠标移动"><a href="#div跟随鼠标移动" class="headerlink" title="div跟随鼠标移动"></a>div跟随鼠标移动</h4><p>1.var left=even.pageX或者pageY 是鼠相对于页面的坐标偏移量，但是这两个属性不支持ie8</p><p>2.获取滚动条滚动的距离：chrom认为滚动条是body，可以根据document.body.scrollTop来获取；其他浏览器认为滚动条是html的，根据document.documentElement.scrollTop来获取</p><h4 id="事件的冒泡"><a href="#事件的冒泡" class="headerlink" title="事件的冒泡"></a>事件的冒泡</h4><p>1.所谓的冒泡指的是事件的向上传导，当后代元素上的事件被触发时，其祖先元素的事件也会被触发</p><p>2.在实际开发中，冒泡是有实际用处的</p><p>3.如果不需要发生事件，可以取消冒泡事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">event.cancleBubble=true; //所有浏览器都支持</span><br></pre></td></tr></table></figure><h4 id="事件的委派"><a href="#事件的委派" class="headerlink" title="事件的委派"></a>事件的委派</h4><p>1.我们希望只绑定一次事件，即可应用到多个元素上，即使元素是后添加的；我们可以将其绑定给元素共同的祖先元素</p><p>2.事件的委派：将事件统一绑定给元素的共同祖先元素，这样当后代元素的事件被触发时，会一直冒泡到祖先元素，从而通过祖先元素的响应函数来处理事件；利用了冒泡，减少事件绑定的次数，提高程序的性能</p><p>3.target：表示事件触发的对象，由谁来触发 </p><h4 id="事件的绑定"><a href="#事件的绑定" class="headerlink" title="事件的绑定"></a>事件的绑定</h4><p>1.使用对象.事件=函数的形式来绑定响应函数，他只能为一个元素的一个事件绑定一个响应函数，，不能绑定多个，如果绑定了多个，只有最后一个能生效</p><p>2.addEventListener():通过此方法为元素绑定响应函数</p><ul><li>第一个参数：事件的字符串，不要on 例如：onclick变为click</li><li>第二个参数：回调函数，当事件触发时该函数会被调用</li><li>第三个参数：是否在捕获阶段触发事件，需要一个布尔值，一般为flase</li></ul><p>在IE8中可以使用attachEvent（）绑定事件,==这个方法也可以同时为一个事件绑定多个处理函数，不同的是先绑定后执行，执行顺序与addEventListener()相反</p><ul><li>第一个参数：事件的字符串，要on</li><li>第二个参数：回调函数，当事件触发时该函数会被调用</li></ul><p>3.addEventListener（）中的this是指绑定事件的对象；attachEvent（）中的this是指window</p><h4 id="bind函数"><a href="#bind函数" class="headerlink" title="bind函数"></a>bind函数</h4><p>1.定义一个函数，用来为指定元素绑定响应函数</p><p>参数：</p><ul><li>obj绑定事件的对象</li><li>eventStr：事件的字符串</li><li>callback回调函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bind</span>(<span class="params">obj,enentStr,callback</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(obj.<span class="property">addEventListener</span>)&#123;</span><br><span class="line">        <span class="comment">//大部分浏览器兼容的方式</span></span><br><span class="line">        obj.<span class="title function_">addEventListener</span>(eventStr,callback,<span class="literal">false</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">         obj.<span class="title function_">attachEvent</span>(<span class="string">&quot;on&quot;</span>+eventStr,callback);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">绑定事件的对象在调用bind函数时，addEvent和attach调用的<span class="variable language_">this</span>不一样，attach是<span class="variable language_">window</span>在调用</span><br><span class="line"><span class="variable language_">this</span>：以函数形式调用，<span class="variable language_">this</span>值的是<span class="variable language_">window</span>;以方法形式调用，值得是当前对象</span><br><span class="line">？？？如何统一</span><br><span class="line">obj.<span class="title function_">attchEvent</span>(<span class="string">&quot;on&quot;</span>+eventStr,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//在匿名对象中调用回函数</span></span><br><span class="line">    callback.<span class="title function_">call</span>(obj);<span class="comment">//当前对象自己调用</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="事件的传播"><a href="#事件的传播" class="headerlink" title="事件的传播"></a>事件的传播</h4><p>1.微软公司：事件应该是由内向外传播的，先触发当前元素的事件，在向祖先元素传播，也就是在冒泡阶段执行；而网景公司相反</p><p>2.w3c综合了两个公司的方案</p><ul><li>捕获阶段：从最外层的祖先元素，向目标元素进行事件的捕获，但是默认不会触发事件</li><li>目标阶段：事件捕获到目标元素，开始在目标元素上触发事件</li><li>冒泡阶段：事件从目标元素向祖先元素传递，依次触发祖先元素上的事件</li></ul><p>==如果希望在捕获阶段就触发事件，可以将addEventListener()的第三个参数设置为true，一般情况下不使用==</p><p>IE8以及以下浏览器没有捕获阶段</p><p>==当使用一个元素的setCapture()方法以后，这个元素将会把下一次所有鼠标按下的相关的事件捕获到自身身上，setCapture（）这个方法只有IE支持，在Chrome中调用会报错==</p><h4 id="事件的拖拽-练习"><a href="#事件的拖拽-练习" class="headerlink" title="事件的拖拽-练习"></a>事件的拖拽-练习</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#box1</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#box2</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 拖拽的流程</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 1.当鼠标按下拖拽元素时，开始拖拽</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> box1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;box1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            box1.<span class="property">onmousedown</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//求出div的偏移量，鼠标.clientX-元素.offsetLeft;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> ol = event.<span class="property">clientX</span> - box1.<span class="property">offsetLeft</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> ot = event.<span class="property">clientY</span> - box1.<span class="property">offsetTop</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// alert(&quot;6666&quot;);</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 2.当鼠标移动时，元素跟着移动</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 为document绑定一个onmousemove事件</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">document</span>.<span class="property">onmousemove</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    event = event || <span class="variable language_">window</span>.<span class="property">event</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> left = event.<span class="property">clientX</span> - ol;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> top = event.<span class="property">clientY</span> - ot;</span></span><br><span class="line"><span class="language-javascript">                    box1.<span class="property">style</span>.<span class="property">left</span> = left + <span class="string">&quot;px&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                    box1.<span class="property">style</span>.<span class="property">top</span> = top + <span class="string">&quot;px&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                &#125;;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">document</span>.<span class="property">onmouseup</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 3.当鼠标松开时。元素固定</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">document</span>.<span class="property">onmousemove</span> = <span class="literal">null</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">document</span>.<span class="property">onmouseup</span> = <span class="literal">null</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//当我们拖拽一个网页中的内容时，浏览器会默认去搜索引擎中搜索内容，此时会导致拖拽功能的异常</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//这个是浏览器的默认行为，如果不希望发生。则可以通过return false来取消</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box2&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="滚轮的事件"><a href="#滚轮的事件" class="headerlink" title="滚轮的事件"></a>滚轮的事件</h4><p>1.onwheel():该事件在鼠标滚轮在元素上下滚动时触发</p><p>2.wheelDelta():可以获取鼠标滚轮滚动的方向，向上滚数120，向下滚是-120，这个值我们不看大小，只看正负；这个属性火狐中不支持，在火狐中使用event.detail来获取滚动的方向，向上是-3 向下是3</p><p>3.当滚动条滚动时，如果浏览器有滚动条，滚动条会随之滚动；这是浏览器的默认行为，如果不希望，则可以取消默认行为，return false</p><p>4.使用addEventListener()方法绑定响应函数，取消默认行为时不能使用return false</p><p>需要使用preventDefa()方法；但是IE8不支持，如果直接调用会报错</p><h4 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h4><p>1.onkeydown():按钮按下，如果一直按着不松手，事件会一直触发，当onkeydown连续触发时，第一次和第二次之间会间隔稍微长一些，其他的会非常的快；这种设计是为了防止误操作</p><p>2.onkeyup():按键松开</p><p>3.键盘事件一般会绑定给一些可以获取到焦点的对象或者是document</p><p>4.可以通过keyCode来获取按键的编码，通过他可以判哪个按键被按下</p><p>5.==在文本框中输入内容，属于onkeydown的默认行为，如果在onkeydown中取消了默认行为，则输入的内容不会出现在文本框中</p><h3 id="BOM—-navigator"><a href="#BOM—-navigator" class="headerlink" title="BOM—-navigator"></a>BOM—-navigator</h3><p>1.BOM：浏览器对象模型，可以通过JS来操作浏览器，在BOM中为我们提供了一组对象，用来完成浏览器的操作</p><p>2.window对象：整个浏览器的窗口，网页的全局对象</p><p>2.navigator对象：当前浏览器信息，通过该对象可以用来识别不同的浏览器(由于历史原因，navigator中的大部分属性都已经不能帮助我们识别浏览器的信息；一般只会使用userAgent来判断浏览器的信息，==userAgent是一个字符串，这个字符串包含有用来描述浏览器信息的内容，不同的浏览器会有不同的userAgent==)</p><ul><li>appName:</li><li>在IE11以及微软都已经将相关的表示去除了，所以不能通过userAgent来识别一个浏览器是否是IE了</li></ul><p>3.location对象：当前浏览器的地址栏信息，通过location可以获取地址栏信息，或者操作浏览器跳转页面</p><p>4.history对象：代表浏览器的历史记录 通过该对象来操作浏览器的历史记录出于隐私保护，该对象不可以获取到具体的历史记录，只能操作浏览器向前或者向后翻页；而且该操作只在当次操作有效</p><p>5.screen对象：代表用户的屏幕信息，通过该对象可以获取用户的显示器的相关信息</p><p>==这些BOM对象都是作为window对象的属性保存的，可以通过window对象来使用，也可以直接使用==</p><h4 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h4><p>1.length属性可以获取到当前页面访问到的链接数量</p><p>2.back():退回至上一个页面</p><p>3.forward()：可以跳转至下一个页面</p><p>4.go():可以用来跳转至指定页面</p><ul><li>他需要一个整数参数</li><li>1:表示跳转至一个页面</li><li>2:表示跳转至两个页面</li><li>-1：表示向后跳转一个页面</li></ul><h4 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h4><p>1.如果直接打印location：可以获取当前页面的完整路径</p><p>2.如果直接将location修改为一个完整的路径或相对路径，页面会跳转至指定页面</p><p>3.assign（）:跳转至其他页面</p><p>4.reload（）：重新加载当前页面 当我们传递一个true作为参数 时，会强制清楚缓存</p><p>5.replace():可以使用一个新的页面替换当前页面，不会生成历史记录，不能够利用back（）回退至上一个页面</p><h4 id="定时器简介"><a href="#定时器简介" class="headerlink" title="定时器简介"></a>定时器简介</h4><p>1.如果希望一段程序每间隔一定时间运行一次，可以使用定时调用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">setInterval():定时调用，每隔一段时间调用一次</span><br><span class="line">参数：</span><br><span class="line">1.回调函数</span><br><span class="line">2.调用间隔时间，单位为ms</span><br><span class="line">返回值：返回一个Number类型的数据，这个数字作为定时器的唯一标识</span><br><span class="line">var timer=......</span><br><span class="line">clearInterval(timer):可以用来关闭定时器，方法中需要一个定时器的标识作为参数；</span><br></pre></td></tr></table></figure><p>==clearInterval（）可以接收任意一个参数，也可以是undefined，如果参数是一个有效的定时器标识，则停止对应的定时器，如果参数不是一个有效的标识，则说明也不做==</p><h6 id="切换图片练习-定时器"><a href="#切换图片练习-定时器" class="headerlink" title="切换图片练习-定时器"></a>切换图片练习-定时器</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> img1=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;img1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> btn1=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> btn2=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn2&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 定义一个变量，用来保存定时器的标识</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> timer;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//点击停止按钮以后，自动停止图片的轮放</span></span></span><br><span class="line"><span class="language-javascript">            btn2.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="built_in">clearInterval</span>(timer);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> imgArr=[<span class="string">&quot;洗手1.png&quot;</span>,<span class="string">&quot;洗手2.png&quot;</span>,<span class="string">&quot;洗手3.png&quot;</span>];</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//创建一个变量，来保存当前变量的索引</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> index=<span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">            btn1.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 再开启定时器前，要关闭当前元素上的其他定时器</span></span></span><br><span class="line"><span class="language-javascript">                <span class="built_in">clearInterval</span>(timer);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 目前每点击一次按钮,就会开启一次定时器，点击多次的话会开启多个定时器，导致图片的切换速度过快，只能关闭最后一次的定时器</span></span></span><br><span class="line"><span class="language-javascript">                </span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//开启一个定时器来自动切换图片</span></span></span><br><span class="line"><span class="language-javascript">          timer= <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                index++;</span></span><br><span class="line"><span class="language-javascript">                img1.<span class="property">src</span>=imgArr[index%imgArr.<span class="property">length</span>];</span></span><br><span class="line"><span class="language-javascript">            &#125;,<span class="number">1000</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">           </span></span><br><span class="line"><span class="language-javascript">          </span></span><br><span class="line"><span class="language-javascript">           </span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;洗手1.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;img1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>开始<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn2&quot;</span>&gt;</span>暂停<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="延时调用"><a href="#延时调用" class="headerlink" title="延时调用"></a>延时调用</h4><p>1.指的是函数隔一段时间执行，而且只会执行一次；而定时调用会执行多次</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(function()&#123;&#125;,3000);</span><br></pre></td></tr></table></figure><p>2.使用clearTimeout()来关闭一个延时调用</p><h3 id="定时器的应用（1）"><a href="#定时器的应用（1）" class="headerlink" title="定时器的应用（1）"></a>定时器的应用（1）</h3><p>==parseInt() 将一个字符串中的有效的整数内容取出来 然后转换成Number==</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        *&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            </span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#box1</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#ff0000</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> btn1=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> box1=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;box1&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> timer;<span class="comment">//定义一个变量来保存定时器的标识</span></span></span><br><span class="line"><span class="language-javascript">            btn1.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//关闭上一个定时器</span></span></span><br><span class="line"><span class="language-javascript">                <span class="built_in">clearInterval</span>(timer);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 开启一个定时器，用来执行动画效果</span></span></span><br><span class="line"><span class="language-javascript">               timer=  <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 获取box1原来的left值</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> old=<span class="built_in">parseInt</span>(<span class="title function_">getStyle</span>(box1,<span class="string">&quot;left&quot;</span>));</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 在旧值的基础上增加</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> newValue=old+<span class="number">10</span>;</span></span><br><span class="line"><span class="language-javascript">                    box1.<span class="property">style</span>.<span class="property">left</span>=newValue+<span class="string">&quot;px&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// alert(old);</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                &#125;,<span class="number">30</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//获取当前元素的任意的样式</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">getStyle</span>(<span class="params">obj,name</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(<span class="variable language_">window</span>.<span class="property">getComputedStyle</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="title function_">getComputedStyle</span>(obj,<span class="literal">null</span>)[name];</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> obj.<span class="property">currentStyle</span>[name];</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>点击按钮以后，box1向右移动<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">box1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="定时器的应用（2）"><a href="#定时器的应用（2）" class="headerlink" title="定时器的应用（2）"></a>定时器的应用（2）</h4><p>抽离出一个执行简单动画的函数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"> // 创建一个可以执行简单动画的函数</span><br><span class="line">            // 参数：</span><br><span class="line">            // 要执行动画的对象obj</span><br><span class="line">            //移动的速度speed  speed的正负值应该在函数内部考虑</span><br><span class="line">            //target:执行动画的目标位置（向左移动时判断newValue是否小于target）</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span> <span class="title function_">move</span>(<span class="params">obj, speed, target</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="built_in">clearInterval</span>(timer);<span class="comment">//避免在同一个元素上开启多个定时器</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 判断speed的正负</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 如果是从0往800走 则speed为正，反之为负</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> current = <span class="built_in">parseInt</span>(<span class="title function_">getStyle</span>(obj, <span class="string">&quot;left&quot;</span>));</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span>(current&gt;target)&#123;</span></span><br><span class="line"><span class="language-javascript">                    speed=-speed;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 开启一个定时器，用来执行动画效果</span></span></span><br><span class="line"><span class="language-javascript">                timer = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 获取box1原来的left值</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> old = <span class="built_in">parseInt</span>(<span class="title function_">getStyle</span>(obj, <span class="string">&quot;left&quot;</span>));</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 在旧值的基础上增加</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> newValue = old + speed;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> ((newValue &lt; target &amp;&amp; speed &lt; <span class="number">0</span>) || (speed &gt; <span class="number">0</span> &amp;&amp; newValue &gt; target)) &#123;</span></span><br><span class="line"><span class="language-javascript">                        newValue = target;</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                    obj.<span class="property">style</span>.<span class="property">left</span> = newValue + <span class="string">&quot;px&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (newValue == target) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="built_in">clearInterval</span>(timer);</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// alert(old);</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                &#125;, <span class="number">30</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>目前我们定时器的标识由timer保存，所有正在执行的定时器都在这个变量中保存</p><p>我们向执行动画的对象中添加一个timer属性，用来保存他自己的定时器的标识，obj.timer</p><p> 发现新大陆：callback&amp;&amp;callback()   有callback才执行对应的函数callback（）</p><h3 id="类的操作"><a href="#类的操作" class="headerlink" title="类的操作"></a>类的操作</h3><p>1.通过style属性来修改元素的样式，每修改一次样式，浏览器就需要重新渲染一次页面，这样执行的性能比较差，修改多种样式时也不太方便；我们希望一行代码可以修改多个样式</p><p>2.我们可以通过修改元素的class属性来间接修改样式，这样我们只需要修改一次即可修改多个样式，浏览器只需要重新渲染页面一次，并且用这种方式可以使表现和方式进一步的分离</p><p>3.定义一个函数，用于向一个元素中添加一个指定的class属性值</p><p>参数：</p><ul><li>obj：要添加class属性的元素</li><li>cn：要添加的class值</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">addClass</span>(<span class="params">obj,cn</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span>(!<span class="title function_">hasClass</span>(obj,cn))&#123;</span></span><br><span class="line"><span class="language-javascript">obj.<span class="property">className</span>+=<span class="string">&quot; &quot;</span>+cn;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//判断一个元素中是否含有指定的class属性</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">hasClass</span>(<span class="params">obj,cn</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//判断obj中有没有cn这个class</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//创建一个正则表达式</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> reg=<span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;\\b&quot;</span>+cn+<span class="string">&quot;\\b&quot;</span>);<span class="comment">//可以动态生成正则表达式</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> reg.<span class="title function_">test</span>(obj.<span class="property">className</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//删除一个元素中指定的class属性</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">reClass</span>(<span class="params">obj,cn</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//创建一个正则表达式</span></span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">var</span> reg=<span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;\\b&quot;</span>+cn+<span class="string">&quot;\\b&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//删除class</span></span></span><br><span class="line"><span class="language-javascript">        obj.<span class="property">className</span>=obj.<span class="property">className</span>.<span class="title function_">replace</span>(reg,<span class="string">&quot;&quot;</span>);<span class="comment">//替换正则表达式中的内容</span></span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//用来切换一个类，如果元素中具有该类，则删除；没有该类，则添加</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">toggleClass</span>(<span class="params">obj,,cn</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//判断obj中是否含有cn</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(<span class="title function_">hasClass</span>(obj,cn))&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">reClass</span>(obj,cn);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">addClass</span>(o)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="二级菜单"><a href="#二级菜单" class="headerlink" title="二级菜单"></a>二级菜单</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//定义一个变量来保存当前打开的菜单</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> openDiv=menuSpan[<span class="number">0</span>].<span class="property">parentNode</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//this代表当前点击的span</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//获取span元素</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> parentDiv=<span class="variable language_">this</span>.<span class="property">parentNode</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//在切换之前获取元素的高度</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> begin=parentDiv.<span class="property">offsetHeight</span>;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript"><span class="comment">//关闭parentDiv</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">toggleClass</span>(parent,<span class="string">&quot;collapsed&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//在切换之后，获取元素的高度</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> ebd=parentDiv.<span class="property">offsetHeight</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//动画效果就是将高度从begin向end过渡</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript"><span class="comment">//判断openDiv和parentDiv是否相同</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span>(openDiv!=parentDiv&amp;&amp;!<span class="title function_">hasClass</span>(openDiv,<span class="string">&quot;collapsed&quot;</span>))&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//打开菜单后，关闭之前的菜单</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//为了后面统一处理过渡效果，我们希望在这里将Addclass 改为toggleclass</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//此处toggleclass不具备有移除功能</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">tooggleClass</span>(openDiv,<span class="string">&quot;collapsed&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//修改openDiv为当前打开的菜单</span></span></span><br><span class="line"><span class="language-javascript">openDiv=parentDiv;<span class="comment">//确保openDiv总是最新打开的那个div</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="JSON-javascript-object-notation-js对象表示法"><a href="#JSON-javascript-object-notation-js对象表示法" class="headerlink" title="JSON-javascript object notation(js对象表示法)"></a>JSON-javascript object notation(js对象表示法)</h3><p>1.JS中的对象只有js自己认识，其他的语言都不认识</p><p>2.==JSON就是一个特殊格式的字符串，这个字符串可以被任意的语言识别，并且可以转换成任意语言的对象，JSON在开发中主要用来数据的交互==</p><p>3.JSON和JS对象的格式一样，只不过JSON字符串的属性名必须加双引号</p><p>4.JSON分类</p><ul><li>对象{}：var obj=’{“name”:”孙悟空”，“gender”:”男”}’；</li><li>数组[]   var arr=’{1,2,3,”hello”,true}’；</li></ul><p>5.JSON中允许的值</p><ul><li>字符串</li><li>数值</li><li>布尔值</li><li>空值</li><li>对象（普通的对象，不包含函数对象）</li><li>数组</li></ul><p>var obj2=’{“arr”:[1,2,3]}’; 对象里面保存的是数组</p><p>var arr2=’[{“name”:”孙悟空”，“gender”:”男”},{“name”:”孙悟空”，“gender”:”男”}]’; 数组里面保存的是对象</p><p>6.==将JSON字符串转换成JS中的对象==</p><ul><li>在JS中，为我们提供了一个工具类，就叫JSON</li><li>这个对象可将JSON与JS对象进行互相的转化</li><li>JSON.parse():可以将json字符串转换成js对象，需要一个js字符串作为参数，会将该字符串转换成js并且返回</li><li>JSON.stringify():可以将一个js对象转换为json字符串，需要一个js对象作为参数，在返回一个json字符串</li></ul><p>7.json这个对象在IE7以及以下的浏览器不支持，所以在这些浏览器中调用时会报错</p><p>8.针对IE7以及以下浏览器：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">eval</span>():这个函数可以用来执行一段字符串形式的<span class="variable constant_">JS</span>代码，并将执行结果返回;在开发中尽量不要使用</span></span><br><span class="line"><span class="language-javascript">    如果使用<span class="built_in">eval</span>()执行的字符串中含有&#123;&#125;,它会将&#123;&#125;当成是代码块，如果不希望将其看成代码块解析，则需要在字符前后各加上一个()</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//eval(&quot;(&quot;+str+&quot;)&quot;);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> str=<span class="string">&quot;alert(&#x27;hello&#x27;)&quot;</span>; <span class="comment">//此处str是一段js代码</span></span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//eval(&quot;(&quot;+str+&quot;)&quot;);</span></span></span><br><span class="line"><span class="language-javascript"> <span class="built_in">eval</span>(str);<span class="comment">//会执行alert(&quot;hello&quot;);这段代码</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>9.如果需要兼容IE7以及以下的JSON操作，则可以通过引入一个外部的js文件来处理</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES</title>
      <link href="/post/3eb5a9f1.html"/>
      <url>/post/3eb5a9f1.html</url>
      
        <content type="html"><![CDATA[<h4 id="1-ES6"><a href="#1-ES6" class="headerlink" title="1.ES6"></a>1.ES6</h4><h5 id="1-1-let和const关键字"><a href="#1-1-let和const关键字" class="headerlink" title="1.1 let和const关键字"></a>1.1 let和const关键字</h5><h6 id="1-1-1-let关键字"><a href="#1-1-1-let关键字" class="headerlink" title="1.1.1 let关键字"></a>1.1.1 let关键字</h6><p>（1）特性</p><ul><li><p>变量不能重复声明</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> a=<span class="number">2</span>; <span class="comment">//报错，a未定义的标识符</span></span><br></pre></td></tr></table></figure></li><li><p>块级作用域：只在代码块中有效</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> a=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);<span class="comment">//报错，a未定义的标识符</span></span><br></pre></td></tr></table></figure></li><li><p>不存在变量提升</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//报错，如果是var进行声明的话会进行变量提升，得到undefined</span></span><br><span class="line"><span class="keyword">let</span> a=<span class="number">1</span>;</span><br></pre></td></tr></table></figure></li><li><p>不影响作用域链</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> school=<span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(school) ;<span class="comment">//abc</span></span><br><span class="line">    <span class="title function_">fun</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>（2）案例</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">            <span class="attribute">display</span>: inline-block;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">            <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取元素对象</span></span><br><span class="line">       <span class="keyword">let</span> items = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;item&quot;</span>);</span><br><span class="line">       <span class="comment">//遍历并且绑定事件</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; items.<span class="property">length</span>; i++) &#123;</span><br><span class="line">           items[i].<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">               <span class="comment">//修改当前元素的背景颜色</span></span><br><span class="line">               <span class="comment">// this.style.backgroundColor =&quot;pink&quot;;</span></span><br><span class="line">               items[i].<span class="property">style</span>.<span class="property">backgroundColor</span> =<span class="string">&quot;purple&quot;</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">//// 当for循环中使用的是var来声明i变量时，var=3的时候，点击事件开始向外层作用域找，找不到，就是windows.i，此时是3，如果是let i，具有块级作用域，每一个盒子都绑定了对应的事件</span></span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;page-header&quot;</span>&gt;</span>点击切换颜色<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="1-1-2-const声明常量以及特点"><a href="#1-1-2-const声明常量以及特点" class="headerlink" title="1.1.2 const声明常量以及特点"></a>1.1.2 const声明常量以及特点</h6><p>（1）声明常量</p><ul><li><p>一定得赋初始值</p></li><li><p>一般常量使用大写（潜规则）</p></li><li><p>常量的值不能修改</p></li><li><p>具有块级作用域</p></li><li><p>对于数组和对象的元素修改，不算做对常量的修改，不会报错</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">const</span> a=[<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>];</span><br><span class="line">        a.<span class="title function_">push</span>(<span class="string">&quot;32&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a);<span class="comment">//[&quot;1&quot;,&quot;2&quot;,&quot;32&quot;]</span></span><br><span class="line"><span class="comment">//虽然a这个数组元素发生的变化，但是他所指向的地址没有发生变化</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="1-2-解构赋值"><a href="#1-2-解构赋值" class="headerlink" title="1.2 解构赋值"></a>1.2 解构赋值</h5><p>（1）介绍：允许按照一定模式从数组和对象中提取值，对变量进行赋值</p><p>（2）数组的解构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> test=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> [a,b,c,d]=test;</span><br><span class="line">cocsole.<span class="title function_">log</span>(a); <span class="comment">//1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);<span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>（3）对象的解构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> student=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;mmm&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="string">&quot;10&quot;</span>,</span><br><span class="line">    <span class="attr">speak</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;mm是一个大帅逼&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span>&#123;name,age,speak&#125;=student;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(speak);</span><br><span class="line"></span><br><span class="line"><span class="comment">//属性解构用的少，方法解构用的较多</span></span><br></pre></td></tr></table></figure><h5 id="1-3-模板字符串"><a href="#1-3-模板字符串" class="headerlink" title="1.3 模板字符串"></a>1.3 模板字符串</h5><p>（1）介绍：ES6引入新的声明字符串的方式，反引号（``）</p><p>（2）声明</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str=<span class="string">`我是一个反引号的字符串`</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str,<span class="keyword">typeof</span> str);<span class="comment">//我是一个反引号的字符串，string</span></span><br></pre></td></tr></table></figure><p>（3）特性</p><ul><li><p>内容中可以直接出现换行符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str=<span class="string">`&lt;ul&gt;马冬梅&lt;/ul&gt;</span></span><br><span class="line"><span class="string">          &lt;li&gt;马什么梅&lt;/li &gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;马 &lt;/li&gt;`</span></span><br></pre></td></tr></table></figure></li><li><p>直接进行变量的拼接</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=<span class="string">`永劫无间`</span>;</span><br><span class="line"><span class="keyword">let</span> b=<span class="string">`XXX是我最喜欢玩的游戏`</span>;<span class="comment">//要想做到 永劫无间是我最喜欢玩的游戏 需要用到模板字符串</span></span><br><span class="line"><span class="keyword">let</span> c=<span class="string">`<span class="subst">$&#123;a&#125;</span>是我做喜欢玩的游戏`</span>;</span><br></pre></td></tr></table></figure></li></ul><h5 id="1-4-对象的简化写法"><a href="#1-4-对象的简化写法" class="headerlink" title="1.4 对象的简化写法"></a>1.4 对象的简化写法</h5><p>（1）介绍:ES6中允许在大括号中，直接导入变量和函数，作为对象的属性和方法，这样写更为简洁</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name=<span class="string">&quot;a&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> charge=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;说的就是你&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> school=&#123;</span><br><span class="line">    name,</span><br><span class="line">    charge,</span><br><span class="line">    <span class="title function_">improve</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;你可以提高技能&quot;</span>); <span class="comment">//省略了function</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(school);</span><br></pre></td></tr></table></figure><h5 id="1-5-箭头函数"><a href="#1-5-箭头函数" class="headerlink" title="1.5 箭头函数"></a>1.5 箭头函数</h5><p>（1）声明一个函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> f=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">let</span> <span class="title function_">fn</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> a + b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn</span>(<span class="number">1</span>,<span class="number">2</span>));</span><br></pre></td></tr></table></figure><p>（2）特性</p><ul><li>==this是静态的，始终指向函数声明时所在作用域下的this的值==</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">A</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">B</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">name</span> = <span class="string">&#x27;尚硅谷&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> school = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;ATGUIGU&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//直接调用</span></span><br><span class="line"><span class="title function_">A</span>()   <span class="comment">//尚硅谷</span></span><br><span class="line"><span class="title function_">B</span>()  <span class="comment">//尚硅谷</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//call</span></span><br><span class="line">A.<span class="title function_">call</span>(school); <span class="comment">//ATGUIGU</span></span><br><span class="line">B.<span class="title function_">cal</span>(school);  <span class="comment">//尚硅谷</span></span><br></pre></td></tr></table></figure><ul><li><p>不能作为构造函数实例化对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">Person</span>=(<span class="params">name,age</span>)=&gt;&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span>=name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span>=age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> me=<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;mmm&quot;</span>,<span class="number">10</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(me); <span class="comment">//person is not a constructor</span></span><br></pre></td></tr></table></figure></li><li><p>不能使用arguments变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">f</span>=(<span class="params"></span>)=&gt;&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>); <span class="comment">//arguments is not defined </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br></pre></td></tr></table></figure></li><li><p>箭头函数的简写</p><ul><li>当形参只有一个的时候，可以省略小括号</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">add</span>=(<span class="params">a</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> a+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以把小括号省略掉</span></span><br><span class="line"> <span class="keyword">let</span> <span class="title function_">add</span> = a=&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> a + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">2</span>));</span><br></pre></td></tr></table></figure><ul><li><p>当代码体只有一行的时候，可以省略花括号，==并且return语句也得省略==,语句的执行结果就是函数的返回值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">pow</span>=(<span class="params">n</span>)=&gt;n*n;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">pow</span>(<span class="number">2</span>));</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>（3）箭头函数的实践与应用场景</p><p>出现问题：Uncaught TypeError: Cannot read property ‘addEventListener’ of null（打开页面时）</p><p>原因：在页面没有完全加载的时候这段监听的代码就已经执行，在执行这段代码之前的DOM事件的节点还没有创建，无法找到监听的事件。</p><p>解决方法：==等待页面完全加载完成之后再加载这段js代码==</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">       <span class="selector-id">#box</span>&#123;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">background-color</span>:pink;</span></span><br><span class="line"><span class="language-css">       &#125; </span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/*a.addEventListener(&quot;click&quot;,function()&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        let _this=this;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        setTimeout(function()&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            _this.style.backgroundColor=&quot;green&quot;;*/</span></span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">let</span> a=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;box&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    a.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">       </span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">backgroundColor</span>=<span class="string">&quot;green&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;,<span class="number">2000</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//指向声明时，所在作用域下的this的值,当前作用域是function，function中的this所指的就是a这个DOM对象</span></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从数组中返回偶数的值</span></span><br><span class="line"><span class="comment">//第一种：使用原来函数声明的方法</span></span><br><span class="line"><span class="keyword">const</span> arr=[<span class="number">1</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">10</span>];</span><br><span class="line"><span class="keyword">const</span> result=arr.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">item</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(item%<span class="number">2</span> ===<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">//const result=arr.filter(item =&gt; item % 2=== 0);</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><p>适合场景：</p><ul><li>适合与this无关的回调，定时器，数组的方法回调</li><li>不适合与this有关的回调，DOM元素的事件回调，对象的方法</li></ul><h5 id="1-6-函数参数的默认值"><a href="#1-6-函数参数的默认值" class="headerlink" title="1.6 函数参数的默认值"></a>1.6 函数参数的默认值</h5><p>（1）介绍：允许给函数参数赋初始值</p><ul><li><p>形参赋初始值：具有默认值的参数，一般位置要靠后（潜规则）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a,b,c=<span class="number">10</span></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b+c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result=<span class="title function_">add</span>(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">//13</span></span><br></pre></td></tr></table></figure></li><li><p>与解构赋值结合</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">connect</span>(<span class="params">&#123;a, b, c, d&#125;</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);<span class="comment">//10</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b);<span class="comment">//“20”</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(c);<span class="comment">//[0,1,2,3]</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(d);<span class="comment">//f()</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">connect</span>(&#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">10</span>,</span><br><span class="line">    <span class="attr">b</span>:<span class="string">&quot;20&quot;</span>,</span><br><span class="line">    <span class="attr">c</span>:[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">    <span class="attr">d</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h5 id="1-7-rest参数"><a href="#1-7-rest参数" class="headerlink" title="1.7 rest参数"></a>1.7 rest参数</h5><p>（1）介绍：引入rest参数，用于获取函数的实参，用来代替arguments</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">...args</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(args); <span class="comment">//[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li><p>rest参数必须放到最后</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a,b,...args</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(args); <span class="comment">//[&quot;c&quot;,&quot;d&quot;]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul><h5 id="1-8-扩展运算符"><a href="#1-8-扩展运算符" class="headerlink" title="1.8 扩展运算符"></a>1.8 扩展运算符</h5><p>（1）能够将【数组】转化为逗号分隔的【参数序列】</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr=[<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">number</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>); <span class="comment">//[&quot;1&quot;,&quot;2&quot;,&quot;3&quot;]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">number</span>(...arr);<span class="comment">//将数组元素转换为了逗号分开的三个元素</span></span><br><span class="line"><span class="title function_">number</span>(arr);<span class="comment">//数组参数传进去，只有一个参数</span></span><br></pre></td></tr></table></figure><ul><li>与rest参数的区别：Rest参数放在函数声明的形参位置，扩展运算符…是放在了函数调用的实参里面</li></ul><h5 id="1-9-拓展运算符的应用"><a href="#1-9-拓展运算符的应用" class="headerlink" title="1.9 拓展运算符的应用"></a>1.9 拓展运算符的应用</h5><ul><li><p>数组的合并</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a=[<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> b=[<span class="string">&quot;3&quot;</span>,<span class="string">&quot;4&quot;</span>];</span><br><span class="line"> <span class="keyword">const</span> c=[...a,...b];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c); <span class="comment">//[&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;]</span></span><br></pre></td></tr></table></figure></li><li><p>数组的克隆</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">const</span> b=[...a]; <span class="comment">//当中有引用数据类型的话，是一个浅拷贝</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">//[1,2,3,4]</span></span><br></pre></td></tr></table></figure></li><li><p>==将伪数组转换为真正的数组==</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> A = documents.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> B = [...A];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(B) <span class="comment">// [div,div,div]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> B);<span class="comment">//Object  js中typeof判断数组类型时，一律返回的是object</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="1-10-symbol"><a href="#1-10-symbol" class="headerlink" title="1.10 symbol"></a>1.10 symbol</h5><h6 id="1-10-1-symbol的介绍与创建"><a href="#1-10-1-symbol的介绍与创建" class="headerlink" title="1.10.1 symbol的介绍与创建"></a>1.10.1 symbol的介绍与创建</h6><p>（1）介绍：ES6中引入一种新的原始数据类型symbol，表示独一无二的值，是一种类似于字符串的数据类型</p><p>（2）特点</p><ul><li>symbol的值唯一，可以解决命名冲突的问题</li><li><p>symbol的值不能和其他数据进行运算</p></li><li><p>symbol定义的对象属性不能使用for..in.. 来循环遍历，但是可以使用reflect.ownkeys来获取对象的所有键名</p></li></ul><p>（3）特性</p><ul><li>创建Symbol</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建symbol</span></span><br><span class="line"><span class="keyword">let</span> a=<span class="title class_">Symbol</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a,<span class="keyword">typeof</span> a);<span class="comment">//Symbol() &quot;symbol&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s = <span class="title class_">Symbol</span>(<span class="string">&#x27;aa&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> s2= <span class="title class_">Symbol</span>(<span class="string">&#x27;aa&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s===s2)   <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s3=<span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;a&quot;</span>); <span class="comment">//函数对象</span></span><br><span class="line"><span class="keyword">let</span> s4=<span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s3===s4) <span class="comment">//true</span></span><br><span class="line"><span class="comment">//其中symbol.for访问的是一个全局的symbol表 会被登记在全局环境中搜素</span></span><br></pre></td></tr></table></figure><ul><li>不能与其他数据进行运算</li></ul><h6 id="1-10-2-对象添加symbol类型的属性"><a href="#1-10-2-对象添加symbol类型的属性" class="headerlink" title="1.10.2 对象添加symbol类型的属性"></a>1.10.2 对象添加symbol类型的属性</h6><ul><li>方式一</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;mmm&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> methods = &#123;</span><br><span class="line">            <span class="attr">up</span>: <span class="title class_">Symbol</span>(),</span><br><span class="line">            <span class="attr">down</span>: <span class="title class_">Symbol</span>()</span><br><span class="line">        &#125;</span><br><span class="line">        a[methods.<span class="property">up</span>] = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;好好学习，天天向上&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        a[methods.<span class="property">down</span>] = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;不读书就会落后&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// // name: &#x27;mmm&#x27;,Symbol(),Symbol()</span></span><br></pre></td></tr></table></figure><ul><li><p>方式二</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> youxi = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;狼人杀&#x27;</span>，</span><br><span class="line">    [<span class="title class_">Symbol</span>(<span class="string">&#x27;say&#x27;</span>)]:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;阿萨德&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(youxi)    <span class="comment">// name:&#x27;狼人杀&#x27;,Symbol(say)</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="1-11-迭代器"><a href="#1-11-迭代器" class="headerlink" title="1.11 迭代器"></a>1.11 迭代器</h5><h6 id="1-11-1-迭代器的介绍"><a href="#1-11-1-迭代器的介绍" class="headerlink" title="1.11.1 迭代器的介绍"></a>1.11.1 迭代器的介绍</h6><ul><li>迭代器是一种接，为各种不同的数据结构提供统一的访问机制，任何数据类型只要部署了iterator接口（==可以理解为对象中一个属性==），就可以完成遍历</li><li><p>ES6创建了一种新的遍历命令for…of循环，iterato接口主要提供for….of消费</p></li><li><p>原生具备iterator接口的数据（可用for….of遍历）</p><ul><li>Array</li><li>Arguments</li><li>Set</li><li>Map</li><li>String</li><li>TypedArray</li><li>NodeList</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a=[<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> m <span class="keyword">of</span> a)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(m);<span class="comment">//&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot; //for of保存的是键值，for in保存的是键名</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>工作原理<ul><li>创建一个指针对象，指向当前数据结构的起始位置</li><li>第一次调用对象的next方法，指针自动指向数据结构的第一个成员</li><li>接下来不断的调用next方法，指针一直在往后移动，直到指向最后一个成员</li><li>每调用一个next方法，返回一个包含value和done属性的对象</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>];</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">let</span> m <span class="keyword">of</span> a) &#123;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(m);<span class="comment">//&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot; //for of保存的是键值，for in保存的是键名</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">let</span> b=a[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]();</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line">       <span class="comment">//调用对象的next方法 </span></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="title function_">next</span>());<span class="comment">//value:&quot;a&quot; done:false</span></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="title function_">next</span>());<span class="comment">//value:&quot;b&quot; done:false</span></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="title function_">next</span>());<span class="comment">//value:&quot;c&quot; done:false</span></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="title function_">next</span>());<span class="comment">//value:&quot;d&quot; done:false</span></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="title function_">next</span>());<span class="comment">//value:undefined done:true</span></span><br></pre></td></tr></table></figure><h6 id="1-11-2-迭代器的应用（自定义遍历数据）"><a href="#1-11-2-迭代器的应用（自定义遍历数据）" class="headerlink" title="1.11.2 迭代器的应用（自定义遍历数据）"></a>1.11.2 迭代器的应用（自定义遍历数据）</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明一个对象</span></span><br><span class="line">       <span class="keyword">const</span> banji = &#123;</span><br><span class="line">           <span class="attr">name</span>: <span class="string">&quot;终极一班&quot;</span>,</span><br><span class="line">           <span class="attr">stus</span>: [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>],</span><br><span class="line">           [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() &#123;</span><br><span class="line">               <span class="comment">//声明一个索引变量</span></span><br><span class="line">               <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">               <span class="keyword">let</span> _this = <span class="variable language_">this</span>;</span><br><span class="line">               <span class="keyword">return</span> &#123;</span><br><span class="line">                   <span class="attr">next</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                       <span class="keyword">if</span> (index &lt; _this.<span class="property">stus</span>.<span class="property">length</span>) &#123;</span><br><span class="line">                           <span class="keyword">const</span> result = &#123; <span class="attr">value</span>: _this.<span class="property">stus</span>[index], <span class="attr">done</span>: <span class="literal">false</span> &#125;;</span><br><span class="line">                           <span class="comment">//让下标自增</span></span><br><span class="line">                           index++;</span><br><span class="line">                           <span class="keyword">return</span> result;</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="keyword">else</span> &#123;</span><br><span class="line">                           <span class="keyword">return</span> &#123; <span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//遍历这个对象</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> banji) &#123;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(v);  <span class="comment">//&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;</span></span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><h5 id="1-12-生成器"><a href="#1-12-生成器" class="headerlink" title="1.12 生成器"></a>1.12 生成器</h5><h6 id="1-12-1-生成器函数声明与调用"><a href="#1-12-1-生成器函数声明与调用" class="headerlink" title="1.12.1 生成器函数声明与调用"></a>1.12.1 生成器函数声明与调用</h6><p>（1）是ES6提供的一种异步编程解决方案，语法行为与传统函数完全不同</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params"></span>)&#123; <span class="comment">//函数名和function中间有一个 * </span></span><br><span class="line">    <span class="comment">//console.log(&quot;111&quot;);</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&quot;hhh&quot;</span>;     <span class="comment">//yield是函数代码块的分隔符</span></span><br><span class="line">    <span class="comment">// console.log(&quot;222&quot;);</span></span><br><span class="line">     <span class="keyword">yield</span> <span class="string">&quot;www&quot;</span>;</span><br><span class="line">     <span class="comment">//console.log(&quot;333&quot;);</span></span><br><span class="line">     <span class="keyword">yield</span> <span class="string">&quot;eee&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> iterator=<span class="title function_">gen</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iteretor.<span class="title function_">next</span>()); <span class="comment">//&#123;value:&#x27;hhh&#x27;,done:false&#125; next（）执行第一段，并且返回yield后面的值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iteretor.<span class="title function_">next</span>()); <span class="comment">//&#123;value:&quot;www&quot;,done:false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iteretor.<span class="title function_">next</span>()); <span class="comment">//&#123;value:&#x27;eee&#x27;,done:false&#125;</span></span><br></pre></td></tr></table></figure><h6 id="1-12-2-生成器函数的参数传递"><a href="#1-12-2-生成器函数的参数传递" class="headerlink" title="1.12.2 生成器函数的参数传递"></a>1.12.2 生成器函数的参数传递</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params">args</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(args);</span><br><span class="line">    <span class="keyword">let</span> one = <span class="keyword">yield</span> <span class="number">111</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(one);</span><br><span class="line">    <span class="keyword">let</span> two = <span class="keyword">yield</span> <span class="number">222</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(two);</span><br><span class="line">    <span class="keyword">let</span> three = <span class="keyword">yield</span> <span class="number">333</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(three);</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">//next传入的实参即为yield语句的返回结果</span></span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">gen</span>(<span class="string">&#x27;AAA&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>(<span class="string">&#x27;BBB&#x27;</span>));  <span class="comment">//next中传入的BBB将作为yield 111的返回结果</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>(<span class="string">&#x27;CCC&#x27;</span>));  <span class="comment">//next中传入的CCC将作为yield 222的返回结果</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>(<span class="string">&#x27;DDD&#x27;</span>));  <span class="comment">//next中传入的DDD将作为yield 333的返回结果</span></span><br></pre></td></tr></table></figure><h6 id="1-12-3-生成器函数实例"><a href="#1-12-3-生成器函数实例" class="headerlink" title="1.12.3 生成器函数实例"></a>1.12.3 生成器函数实例</h6><ul><li><p>实例1：用生成器函数的方式解决回调地狱问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//js是异步单线程 文件 网络 爬虫 数据库 都是异步操作</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">one</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;111&#x27;</span>)</span><br><span class="line">        iterator.<span class="title function_">next</span>()</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">two</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;222&#x27;</span>)</span><br><span class="line">        iterator.<span class="title function_">next</span>();</span><br><span class="line">    &#125;,<span class="number">2000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">three</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;333&#x27;</span>)</span><br><span class="line">        iterator.<span class="title function_">next</span>();</span><br><span class="line">    &#125;,<span class="number">3000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="title function_">one</span>();</span><br><span class="line">    <span class="keyword">yield</span> <span class="title function_">two</span>();</span><br><span class="line">    <span class="keyword">yield</span> <span class="title function_">three</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">gen</span>();</span><br><span class="line">iterator.<span class="title function_">next</span>();</span><br></pre></td></tr></table></figure></li><li><p>实例2：模拟异步获取数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模拟获取 用户数据 订单数据 商品数据</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">one</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> data=<span class="string">&#x27;用户数据&#x27;</span>;</span><br><span class="line">         <span class="comment">//调用next方法，并且将数据进行传入</span></span><br><span class="line">        iterator.<span class="title function_">next</span>(data)</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">two</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> data=<span class="string">&#x27;订单数据&#x27;</span>;</span><br><span class="line">        iterator.<span class="title function_">next</span>(data)</span><br><span class="line">    &#125;,<span class="number">2000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">three</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> data=<span class="string">&#x27;商品数据&#x27;</span>;</span><br><span class="line">        iterator.<span class="title function_">next</span>(data)</span><br><span class="line">    &#125;,<span class="number">3000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> users=<span class="keyword">yield</span> <span class="title function_">one</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(users)</span><br><span class="line">    <span class="keyword">let</span> orders=<span class="keyword">yield</span> <span class="title function_">two</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(orders)</span><br><span class="line">    <span class="keyword">let</span> goods=<span class="keyword">yield</span> <span class="title function_">three</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(goods)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">gen</span>();</span><br><span class="line">iterator.<span class="title function_">next</span>();</span><br></pre></td></tr></table></figure><h5 id="1-13-Promise"><a href="#1-13-Promise" class="headerlink" title="1.13 Promise"></a>1.13 Promise</h5><h6 id="1-13-1-介绍"><a href="#1-13-1-介绍" class="headerlink" title="1.13.1 介绍"></a>1.13.1 介绍</h6><p>promises是 ES6引入的异步编程的新解决方案，语法上promises是一个构造函数，用来封装异步操作并可以获取成功或失败的结果</p><p>==Promise有三种状态，如果用Promise()构造器创建一个Promise对象，当被创建时，它的状态是pending，如果一个Promise对象的resolve方法被调用，它的状态会变成fulfilled，而如果一个Promise对象的reject方法被调用，它的状态会变成rejected。此外，还有两种初始化Promise对象的方法，分别是Promise.resolve方法和Promise.reject方法，前者会直接返回一个状态为fulfilled的Promise对象而后者会直接返回一个状态为rejected的Promise对象。==</p><p>==在一个Promise链中，如果一个Promise状态变成了fulfilled，它会自动在Promise链中向下寻找，直到发现一个then方法，并执行其中的第一个参数函数，而如果一个Promise的状态变成了rejected，它会在Promise链中向下寻找，直到发现一个带有两个参数的then方法并执行它的第二个参数函数或发现一个catch方法并执行它的参数函数.==</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   <span class="comment">//将异步任务封装再来一个promise对象里面 ，通过参数来改变对象的状态，调用then方法里面的回调</span></span><br><span class="line">       <span class="comment">//实例化promise</span></span><br><span class="line">       <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">           <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">               <span class="keyword">let</span> data = <span class="string">&quot;数据库中的数据&quot;</span>;</span><br><span class="line">               <span class="comment">//调用resolve 和reject这两个函数来改变对象p的状态</span></span><br><span class="line">               <span class="title function_">resolve</span>(data);<span class="comment">//调用完该函数后,对象p的状态就会变成成功</span></span><br><span class="line">  </span><br><span class="line">               <span class="keyword">let</span> err=<span class="string">&quot;数据库中的数据读取失败&quot;</span>;</span><br><span class="line">               <span class="title function_">reject</span>(err);<span class="comment">//</span></span><br><span class="line">  </span><br><span class="line">           &#125;)</span><br><span class="line">       &#125;);</span><br><span class="line">       <span class="comment">//成功之后调用promise对象中的then方法</span></span><br><span class="line">       p.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">           <span class="comment">//成功的形参一般用value </span></span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">       &#125;, <span class="keyword">function</span> (<span class="params">reason</span>) &#123;</span><br><span class="line">           <span class="comment">// 失败的形参一般用reason</span></span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">error</span>(reason);</span><br><span class="line">       &#125;);<span class="comment">//接收两个函数类型的参数</span></span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></table></figure><h6 id="1-13-2-promise封装读取文件"><a href="#1-13-2-promise封装读取文件" class="headerlink" title="1.13.2 promise封装读取文件"></a>1.13.2 promise封装读取文件</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//传统方法读取文件内容</span></span><br><span class="line"><span class="comment">//1.引入fs模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&quot;./resources/大学.md&quot;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="comment">//如果失败，则抛出错误</span></span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="comment">//如果没有出错，则抛出内容</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="title function_">toString</span>());</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3.使用promise封装</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">&quot;./resources/大学.mda&quot;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="title function_">reject</span>(err); <span class="comment">//通过reject函数改变对象的状态为失败</span></span><br><span class="line">        <span class="title function_">resolve</span>(data); <span class="comment">//调用promise函数可以修改对象状态为成功</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value.<span class="title function_">toString</span>());</span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">reasons</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;读取失败&quot;</span>); <span class="comment">//改变文件名的后缀，失败过后返回 “读取失败”</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h6 id="1-13-3-promise的优点"><a href="#1-13-3-promise的优点" class="headerlink" title="1.13.3 promise的优点"></a>1.13.3 promise的优点</h6><p>（1）解决回调地域问题</p><ul><li><p>当我们进行一些互相之间有依赖关系的异步操作时，比如有多个请求，后一个请求需要等待上一个请求的返回结果，依靠传统的Callback方法层层嵌套，嵌套层数过多的话会有call hell的问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入 fs 模块(node.js)</span></span><br><span class="line"><span class="comment">//回调地狱方式读取文件,如果还有异步还会继续回调</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./a.md&#x27;</span>, <span class="function">(<span class="params">err,data1</span>) =&gt;</span> &#123;</span><br><span class="line">  fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./b.md&#x27;</span>, <span class="function">(<span class="params">err, data2</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./c.md&#x27;</span>, <span class="function">(<span class="params">err, data3</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> result = data1 + data2 + data3</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>当我们使用promise时，代码会变得扁平化而且可读，前面的then返回了一个promise,我们可以将then的调用不停的串连起来</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用promise 来实现</span></span><br><span class="line"><span class="comment">//引入 fs 模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="comment">//闯将Promise对象</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//引入 fs 莫模块</span></span><br><span class="line">  <span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line">  fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./a.md&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(data)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./b.md&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//这里的data为a.md value为b.md</span></span><br><span class="line">    <span class="title function_">resolve</span>([value, data])</span><br><span class="line">  &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./c.md&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//这里的data为a.md+b.md</span></span><br><span class="line">      <span class="comment">//将这data 用push()方法压入value</span></span><br><span class="line">      value.<span class="title function_">push</span>(data)</span><br><span class="line">      <span class="title function_">resolve</span>(value)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//打印出value 字符转义</span></span><br><span class="line">  <span class="comment">// console.log(value.toString());</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value.<span class="title function_">join</span>(<span class="string">&#x27;\r\n&#x27;</span>));</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>（2）更加方便的捕获异常</p><p>3.使用Promise来封装一个AJAX请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//采用原生方法封装ajax请求</span></span><br><span class="line"><span class="comment">//1.创建对象</span></span><br><span class="line"> <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">            <span class="comment">//2.初始化</span></span><br><span class="line">            xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&quot;https://api.apiopen.top/getJoke&quot;</span>);</span><br><span class="line">            <span class="comment">//3.发送</span></span><br><span class="line">            xhr.<span class="title function_">send</span>();</span><br><span class="line">            <span class="comment">//4.绑定事件，处理响应结果</span></span><br><span class="line">            xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="comment">//判断</span></span><br><span class="line">                <span class="keyword">if</span> (xhr.<span class="property">readyState</span> == <span class="number">4</span>) &#123;</span><br><span class="line">                    <span class="comment">//判断状态响应码 200-299之间</span></span><br><span class="line">                    <span class="keyword">if</span> (xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>) &#123;</span><br><span class="line">                        <span class="comment">//表示成功</span></span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">response</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">//如果失败</span></span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">status</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//采用promise方法封装ajax请求</span></span><br><span class="line">  <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">            <span class="comment">//2.初始化</span></span><br><span class="line">            xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&quot;https://api.apiopen.top/getJoke&quot;</span>);</span><br><span class="line">            <span class="comment">//3.发送</span></span><br><span class="line">            xhr.<span class="title function_">send</span>();</span><br><span class="line">            <span class="comment">//4.绑定事件，处理响应结果</span></span><br><span class="line">            xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="comment">//判断</span></span><br><span class="line">                <span class="keyword">if</span> (xhr.<span class="property">readyState</span> == <span class="number">4</span>) &#123;</span><br><span class="line">                    <span class="comment">//判断状态响应码 200-299之间</span></span><br><span class="line">                    <span class="keyword">if</span> (xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>) &#123;</span><br><span class="line">                        <span class="comment">//表示成功</span></span><br><span class="line">                        <span class="title function_">resolve</span>(xhr.<span class="property">response</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">//如果失败</span></span><br><span class="line">                        <span class="title function_">reject</span>(xhr.<span class="property">status</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="comment">//指定回调：then方法</span></span><br><span class="line">    p.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">value</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">    &#125;,<span class="keyword">function</span>(<span class="params">reason</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(reason);</span><br><span class="line">    &#125;);   </span><br><span class="line"><span class="comment">//事件的处理均在回调函数中</span></span><br></pre></td></tr></table></figure><h6 id="1-13-4-promise-prototype-then方法"><a href="#1-13-4-promise-prototype-then方法" class="headerlink" title="1.13.4 promise.prototype.then方法"></a>1.13.4 promise.prototype.then方法</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建promise对象</span></span><br><span class="line">        <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//采用setTimeout才做一个异步任务的模拟</span></span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">resolve</span>(<span class="string">&quot;用户数据&quot;</span>);</span><br><span class="line">                <span class="comment">// reject(&quot;出错了&quot;);</span></span><br><span class="line"></span><br><span class="line">            &#125;, <span class="number">1000</span>)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用then方法，then方法的返回结果是Promise对象，对象状态由回调函数的执行结果决定</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果说回调函数中返回的是一个非promise类型的数据，状态为成功，返回值为对象的成功的值</span></span><br><span class="line">        <span class="keyword">const</span> result = p.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">            <span class="comment">//非promise类型的数据</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// return 123;//不写retuen 默认返回的是undefined</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//回调函数返回promise属性</span></span><br><span class="line">            <span class="comment">// return new Promise((resolve, reject)=&gt;&#123;</span></span><br><span class="line">            <span class="comment">//     resolve(&quot;返回成功&quot;)</span></span><br><span class="line">            <span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//回到函数抛出错误</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;出错了&quot;</span>);<span class="comment">//promiseState:&quot;rejected&quot;,promsieResulet:new Error(&quot;出错了&quot;)</span></span><br><span class="line">            </span><br><span class="line">        &#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">warn</span>(reason);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><h6 id="1-13-5-promise实践-读取多个文件内容"><a href="#1-13-5-promise实践-读取多个文件内容" class="headerlink" title="1.13.5 promise实践-读取多个文件内容"></a>1.13.5 promise实践-读取多个文件内容</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//传统方法读取多个文件内容</span></span><br><span class="line"> <span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"> fs.<span class="title function_">readFile</span>(<span class="string">&quot;./resources/大学.md&quot;</span>, <span class="function">(<span class="params">err, data1</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">&quot;./resources/蜀道难.md&quot;</span>, <span class="function">(<span class="params">err, data2</span>) =&gt;</span> &#123;</span><br><span class="line">         fs.<span class="title function_">readFile</span>(<span class="string">&quot;./resources/望庐山瀑布.md&quot;</span>, <span class="function">(<span class="params">err, data3</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> data = data1 + <span class="string">&quot;\r\n&quot;</span>+data2 +<span class="string">&quot;\r\n&quot;</span>+data3; <span class="comment">//此处不需要加上toString()即可完成字符的转换，因为做了运算会自动转换为字符串</span></span><br><span class="line"></span><br><span class="line">             <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">         &#125;);</span><br><span class="line">     &#125;);</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用promise方法封装 读取文件内容 解决回调地域问题</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">&quot;./resources/大学.md&quot;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(data);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// p.then(value =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     console.log(value.toString());</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        fs.<span class="title function_">readFile</span>(<span class="string">&quot;./resources/蜀道难.md&quot;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>([value, data]);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        fs.<span class="title function_">readFile</span>(<span class="string">&quot;./resources/望庐山瀑布.md&quot;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">            value.<span class="title function_">push</span>(data); <span class="comment">//push返回的是数组中的新长度</span></span><br><span class="line">            <span class="title function_">resolve</span>(value);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value.<span class="title function_">join</span>(<span class="string">&quot;\r\n&quot;</span>)); <span class="comment">//join做一个字符串的拼接</span></span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h6 id="1-13-6-catch-方法"><a href="#1-13-6-catch-方法" class="headerlink" title="1.13.6 catch()方法"></a>1.13.6 catch()方法</h6><p>用来指定promise对象失败的回调函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p= <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span>&#123;</span><br><span class="line"><span class="comment">//设置p对象的状态位失败，并设置失败的值</span></span><br><span class="line"><span class="title function_">reject</span>(<span class="string">&quot;出错了&quot;</span>);</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line">p.<span class="title function_">catch</span>(<span class="function">(<span class="params">reason</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">warn</span>(reason);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="1-14-Set集合"><a href="#1-14-Set集合" class="headerlink" title="1.14 Set集合"></a>1.14 Set集合</h5><p>ES6提供了新的数据结构Set集合，它类似于数组，==但成员的值都是不可重复的==，集合实现的iterator接口，所以可以使拓展运算符和for of 进行遍历</p><p>1.创建一个Set</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s=<span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s);<span class="comment">//Set(0) &#123;&#125; &quot;object&quot;</span></span><br></pre></td></tr></table></figure><p>2.属性和方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s=<span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s)<span class="comment">//会自动去重 </span></span><br><span class="line"><span class="comment">//元素个数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">size</span>);<span class="comment">//5</span></span><br><span class="line"><span class="comment">//添加新元素</span></span><br><span class="line">s.<span class="title function_">add</span>(<span class="string">&quot;6&quot;</span>);</span><br><span class="line"><span class="comment">//删除元素</span></span><br><span class="line">s.<span class="title function_">delete</span>(<span class="number">2</span>);</span><br><span class="line"><span class="comment">//检测</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="title function_">has</span>(<span class="number">5</span>));<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>3.应用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="comment">//对数组进行去重</span></span><br><span class="line"><span class="keyword">let</span> result=[...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)]; <span class="comment">//其中扩展运算符可以将伪数组转换为数组</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求交集</span></span><br><span class="line"><span class="keyword">let</span> arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">        <span class="keyword">let</span> arr2=[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">4</span>];</span><br><span class="line">        <span class="keyword">let</span> s2=<span class="keyword">new</span> <span class="title class_">Set</span>(arr2);</span><br><span class="line">        <span class="keyword">let</span> result=[...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)].<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(s2.<span class="title function_">has</span>(item))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"><span class="comment">//求并集</span></span><br><span class="line">  <span class="keyword">let</span> union=[...<span class="keyword">new</span> <span class="title class_">Set</span>([...arr,...arr2])];</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(union);</span><br></pre></td></tr></table></figure><h5 id="1-15-Map与API的介绍"><a href="#1-15-Map与API的介绍" class="headerlink" title="1.15 Map与API的介绍"></a>1.15 Map与API的介绍</h5><p>ES6提供了Map数据结构，它类似于对象，也是键值对的集合，但是键的范围不局限于字符串，各种类型的值（包括对象）都可以当做键，同时Map也实现了iterator接口，也可以使用拓展运算符和for of 进行遍历</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明map对象</span></span><br><span class="line"><span class="keyword">let</span> m=<span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"><span class="comment">//添加元素</span></span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;miaoxinyong&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m);</span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&quot;change&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我们可以成就你&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> s=&#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;miaoxinyong&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        m.<span class="title function_">set</span>(s,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我叫缪新勇&quot;</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(m)</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line">m.<span class="title function_">delete</span>(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取 </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="title function_">get</span>(<span class="string">&quot;change&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//清空</span></span><br><span class="line">m.<span class="title function_">clear</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> m)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v);<span class="comment">//[&quot;change&quot;,f]  [&#123;....&#125;,f]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-16-class类"><a href="#1-16-class类" class="headerlink" title="1.16 class类"></a>1.16 class类</h5><h6 id="1-16-1-介绍"><a href="#1-16-1-介绍" class="headerlink" title="1.16.1 介绍"></a>1.16.1 介绍</h6><p>ES6提供了更接近传统语言的写法，引入了类这个概念，作为对象的模板，通过Class关键字，可以定义类。新的class写法只是为了让对象原型的写法更加清晰，更像面向对象编程的语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">phone</span>&#123;</span><br><span class="line">           <span class="comment">//构造方法，名字不能修改</span></span><br><span class="line">           <span class="title function_">constructor</span>(<span class="params">brand,price</span>)&#123;</span><br><span class="line">               <span class="variable language_">this</span>.<span class="property">brand</span> = brand;</span><br><span class="line">               <span class="variable language_">this</span>.<span class="property">price</span> = price;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">//方法必须使用该语法，不能使用ES5的对象完整形式</span></span><br><span class="line"></span><br><span class="line">           <span class="title function_">call</span>(<span class="params"></span>)&#123;</span><br><span class="line">               <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;小米牛逼&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">let</span>  xiaomi=<span class="keyword">new</span> <span class="title function_">phone</span>(<span class="string">&quot;小米&quot;</span>,<span class="number">1999</span>);</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(xiaomi) <span class="comment">//输出小米这个对象</span></span><br><span class="line">       xiaomi.<span class="title function_">call</span>(); <span class="comment">//小米牛逼</span></span><br></pre></td></tr></table></figure><h6 id="1-16-2-class静态成员"><a href="#1-16-2-class静态成员" class="headerlink" title="1.16.2 class静态成员"></a>1.16.2 class静态成员</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Phone</span>(<span class="params"></span>)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Phone</span>.<span class="property">name</span>=<span class="string">&quot;小米&quot;</span>;</span><br><span class="line"><span class="title class_">Phone</span>.<span class="property">change</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;卢伟冰牛逼&quot;</span>);</span><br><span class="line">&#125; <span class="comment">//函数对象</span></span><br><span class="line"><span class="title class_">Phone</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">size</span>=<span class="string">&quot;50&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> xiaomi=<span class="keyword">new</span> <span class="title class_">Phone</span>(); <span class="comment">//实例对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xiaomi.<span class="property">name</span>);<span class="comment">//undefined </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xiaomi.<span class="property">size</span>);<span class="comment">//50</span></span><br></pre></td></tr></table></figure><p>函数对象与实例对象的区别</p><ul><li><p>函数对象：将函数作为对象使用，简称函数对象</p></li><li><p>实例对象：new产生的对象，简称对象</p></li><li><p>实例对象可以称为对象，函数对象不能称为对象</p><p>==实例对象的属性与构造函数的原型相通。加在构造函数的显示原型上==</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span>&#123;</span><br><span class="line">            <span class="comment">//静态属性:属于类而不属于对象</span></span><br><span class="line">            <span class="keyword">static</span> name=<span class="string">&quot;xiaomi&quot;</span>;</span><br><span class="line">            <span class="keyword">static</span> <span class="title function_">change</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;卢伟冰牛逼&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> phone=<span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(phone.<span class="property">name</span>); <span class="comment">//undefined </span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Phone</span>.<span class="property">name</span>); <span class="comment">//xiaomi</span></span><br></pre></td></tr></table></figure><h6 id="1-16-3-构造函数继承"><a href="#1-16-3-构造函数继承" class="headerlink" title="1.16.3 构造函数继承"></a>1.16.3 构造函数继承</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES5方法实现继承</span></span><br><span class="line">       <span class="keyword">function</span> <span class="title function_">Phone</span>(<span class="params">brand, price</span>) &#123;</span><br><span class="line">           <span class="variable language_">this</span>.<span class="property">brand</span> = brand;</span><br><span class="line">           <span class="variable language_">this</span>.<span class="property">price</span> = price;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//智能手机</span></span><br><span class="line">       <span class="keyword">function</span> <span class="title function_">SmartPhone</span>(<span class="params">brand, price, color, size</span>) &#123;</span><br><span class="line">           <span class="title class_">Phone</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, brand, price);</span><br><span class="line">           <span class="variable language_">this</span>.<span class="property">color</span> = color;</span><br><span class="line">           <span class="variable language_">this</span>.<span class="property">size</span> = size;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//设置子集构造函数的原型</span></span><br><span class="line">       <span class="title class_">SmartPhone</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Phone</span>;</span><br><span class="line">       <span class="title class_">SmartPhone</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">SmartPhone</span>;</span><br><span class="line"></span><br><span class="line">       <span class="title class_">SmartPhone</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">photo</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">lo</span>(<span class="string">&quot;我这个手机可以拍照&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="title class_">SmartPhone</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">playGame</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我这个手机可以玩游戏&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">const</span> chuzi = <span class="keyword">new</span> <span class="title class_">SmartPhone</span>(<span class="string">&quot;锤子&quot;</span>, <span class="number">2499</span>, <span class="string">&quot;黑色&quot;</span>, <span class="number">6</span>);</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(chuzi);</span><br></pre></td></tr></table></figure><h6 id="1-16-4-class类的继承"><a href="#1-16-4-class类的继承" class="headerlink" title="1.16.4 class类的继承"></a>1.16.4 class类的继承</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">            <span class="comment">//构造方法</span></span><br><span class="line">            <span class="title function_">constructor</span>(<span class="params">brand, price</span>)&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">brand</span>= brand;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">price</span>=price;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//父类的成员属性</span></span><br><span class="line">            <span class="title function_">call</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以打电话&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">SmartPhone</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Phone</span>&#123;</span><br><span class="line">            <span class="title function_">constructor</span>(<span class="params">brand, price, color, size</span>)&#123;</span><br><span class="line">                <span class="variable language_">super</span>(brand, price);</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">color</span>=color;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">size</span>=size;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_">photo</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以拍照&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="title function_">playGame</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以玩游戏&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> xiaomi=<span class="keyword">new</span> <span class="title class_">SmartPhone</span>(<span class="string">&quot;小米&quot;</span>,<span class="number">1999</span>,<span class="string">&quot;黑色&quot;</span>, <span class="number">6</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(xiaomi);</span><br></pre></td></tr></table></figure><h6 id="1-16-5-子类对父类方法的重写"><a href="#1-16-5-子类对父类方法的重写" class="headerlink" title="1.16.5 子类对父类方法的重写"></a>1.16.5 子类对父类方法的重写</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">           <span class="comment">//构造方法</span></span><br><span class="line">           <span class="title function_">constructor</span>(<span class="params">brand, price</span>)&#123;</span><br><span class="line">               <span class="variable language_">this</span>.<span class="property">brand</span>= brand;</span><br><span class="line">               <span class="variable language_">this</span>.<span class="property">price</span>=price;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">//父类的成员属性</span></span><br><span class="line">           <span class="title function_">call</span>(<span class="params"></span>)&#123;</span><br><span class="line">               <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以打电话&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">class</span> <span class="title class_">SmartPhone</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Phone</span>&#123;</span><br><span class="line">           <span class="title function_">constructor</span>(<span class="params">brand, price, color, size</span>)&#123;</span><br><span class="line">               <span class="variable language_">super</span>(brand, price);</span><br><span class="line">               <span class="variable language_">this</span>.<span class="property">color</span>=color;</span><br><span class="line">               <span class="variable language_">this</span>.<span class="property">size</span>=size;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="title function_">photo</span>(<span class="params"></span>)&#123;</span><br><span class="line">               <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以拍照&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="title function_">playGame</span>(<span class="params"></span>)&#123;</span><br><span class="line">               <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以玩游戏&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="title function_">call</span>(<span class="params"></span>)&#123;</span><br><span class="line">               <span class="comment">//子类不能够调用父类的同名方法</span></span><br><span class="line">               </span><br><span class="line">               <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以视频通话&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">const</span> xiaomi=<span class="keyword">new</span> <span class="title class_">SmartPhone</span>(<span class="string">&quot;小米&quot;</span>,<span class="number">1999</span>,<span class="string">&quot;黑色&quot;</span>, <span class="number">6</span>);</span><br><span class="line">      xiaomi.<span class="title function_">call</span>();<span class="comment">//先找自己的Call方法，没有找到再去父类中寻找  “我可以视频通话”</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="1-16-6-class的getter和setter"><a href="#1-16-6-class的getter和setter" class="headerlink" title="1.16.6 class的getter和setter"></a>1.16.6 class的getter和setter</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span>&#123;</span><br><span class="line">           <span class="keyword">get</span> <span class="title function_">price</span>()&#123;</span><br><span class="line">               <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;对象的价格属性被读取了&quot;</span>)</span><br><span class="line">               <span class="comment">//对price属性的读取绑定了一个函数，只要是读取实例对象的price属性，该函数就会被触发</span></span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">set</span> <span class="title function_">price</span>(<span class="params">newValue</span>)&#123; <span class="comment">//设置器必须要有一个参数</span></span><br><span class="line">               </span><br><span class="line">               <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;对象的价格改变了&quot;</span>)</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">let</span> s=<span class="keyword">new</span> <span class="title class_">Phone</span>(); </span><br><span class="line"></span><br><span class="line">       s.<span class="property">price</span>;<span class="comment">//对象的价格属性被读取了</span></span><br><span class="line">       s.<span class="property">price</span>=<span class="string">&quot;22&quot;</span>;<span class="comment">//对象的价格改变了</span></span><br></pre></td></tr></table></figure><h5 id="1-17-ES6的数值扩展"><a href="#1-17-ES6的数值扩展" class="headerlink" title="1.17 ES6的数值扩展"></a>1.17 ES6的数值扩展</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Number.EPSILON是javascript表示的最小精读</span></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">equal</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">       <span class="keyword">if</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(a-b) &lt; <span class="title class_">Number</span>.<span class="property">EPSILON</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">       &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0.1</span>+<span class="number">0.2</span>===<span class="number">0.3</span>);<span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">equal</span>(<span class="number">0.1</span>+<span class="number">0.2</span>,<span class="number">0.3</span>);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//二进制和八进制</span></span><br><span class="line"><span class="keyword">let</span> b=<span class="number">0b1010</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);<span class="comment">//10</span></span><br><span class="line"><span class="keyword">let</span> o=<span class="number">0o777</span>; <span class="comment">//八进制表示</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o);<span class="comment">//511</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Number.isFinite:检测一个数值是否为有限数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="title function_">iSFinite</span>(<span class="number">100</span>/<span class="number">0</span>));<span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isFinite</span>(infinity));<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Number.isNaN:检查一个数是否是NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="number">123</span>));<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串转整数</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">parseInt</span>(<span class="string">&#x27;5213123love&#x27;</span>)); <span class="comment">//5213123</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">parseFloat</span>(<span class="string">&#x27;5.123123神器&#x27;</span>)); <span class="comment">//5.123123</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//判断是否为整数</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="title function_">isInteger</span>(<span class="number">5</span>));  <span class="comment">//true</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="title function_">isInteger</span>(<span class="number">2.5</span>)); <span class="comment">//false</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">//将小数部分抹除</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">trunc</span>(<span class="number">3.45345345345</span>)) <span class="comment">//3</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//检测一个数到底是正数、负数、还是0</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">sign</span>(<span class="number">100</span>)) <span class="comment">//1</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">sign</span>(<span class="number">0</span>))  <span class="comment">//0</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">sign</span>(-<span class="number">123</span>)) <span class="comment">//-1</span></span><br></pre></td></tr></table></figure><h5 id="1-18-对象方法的扩展"><a href="#1-18-对象方法的扩展" class="headerlink" title="1.18 对象方法的扩展"></a>1.18 对象方法的扩展</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Object.is :判断两个值是否完全相等</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="number">123</span>,<span class="number">123.1</span>));<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="title class_">NaN</span>,<span class="title class_">NaN</span>));<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span>===<span class="title class_">NaN</span>);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Object.assign:对象的合并</span></span><br><span class="line"> <span class="keyword">const</span> a = &#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;ran&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>:<span class="number">12</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> b = &#123;</span><br><span class="line">        <span class="attr">pass</span>:<span class="string">&#x27;i love you&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">assign</span>(a,b))   <span class="comment">//&#123;name:&#x27;ran&#x27;,age:&#x27;12&#x27;,pass:&#x27;i love you&#x27;&#125; 出现同名的属性则会将原来的同名属性覆盖掉</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Object.setPrototypeOf 设置原型对象</span></span><br><span class="line"> <span class="keyword">const</span> school = &#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> cities = &#123;</span><br><span class="line">        <span class="attr">xiaoqu</span>:[<span class="string">&#x27;北京&#x27;</span>,<span class="string">&#x27;上海&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(school,cities)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(school))  <span class="comment">//&#123;xiaoqu: Array(2)&#125;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(school)  <span class="comment">//&#123;name: &quot;尚硅谷&quot;&#125;</span></span><br></pre></td></tr></table></figure><h5 id="1-20-模块化"><a href="#1-20-模块化" class="headerlink" title="1.20 模块化"></a>1.20 模块化</h5><h6 id="1-20-1-介绍"><a href="#1-20-1-介绍" class="headerlink" title="1.20.1 介绍"></a>1.20.1 介绍</h6><p>（1）模块化是将一个大的程序文件，拆分成许多小的文件，然后将小文件组合起来</p><p>（2）好处</p><ul><li>防止命名冲突</li><li>代码复用</li><li>高维护性</li></ul><h6 id="1-20-2-ES6模块化的语法"><a href="#1-20-2-ES6模块化的语法" class="headerlink" title="1.20.2 ES6模块化的语法"></a>1.20.2 ES6模块化的语法</h6><p>模块功能上主要由两个命令构成：export和import</p><ul><li>export 用于规定模块的对外接口</li><li>import用于输入其他模块提供的功能</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模块.js</span></span><br><span class="line"><span class="comment">//引入的通用方式</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> test <span class="keyword">from</span> <span class="string">&quot;./test.js&quot;</span>; <span class="comment">//额.js和模块.js在同一目录下</span></span><br><span class="line"><span class="comment">//而且不能省略./</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(test);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test.js</span></span><br><span class="line"><span class="comment">//分别暴露</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你是傻逼&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="1-20-3-ES6模块暴露数据语法总和"><a href="#1-20-3-ES6模块暴露数据语法总和" class="headerlink" title="1.20.3. ES6模块暴露数据语法总和"></a>1.20.3. ES6模块暴露数据语法总和</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//统一暴露</span></span><br><span class="line"> <span class="keyword">let</span> a = <span class="number">3</span>;</span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">b</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你是傻逼&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span>&#123;a,b&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认暴露</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    <span class="comment">//里面的内容可以是任意数据类型</span></span><br><span class="line">    <span class="attr">school</span>:<span class="string">&quot;新建二中&quot;</span></span><br><span class="line">    <span class="attr">change</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我们学校是最棒的&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="1-20-4ES6模块引入数据语法总和"><a href="#1-20-4ES6模块引入数据语法总和" class="headerlink" title="1.20.4ES6模块引入数据语法总和"></a>1.20.4ES6模块引入数据语法总和</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//解构赋值形式</span></span><br><span class="line"><span class="keyword">import</span>&#123;a,b&#125; <span class="keyword">from</span> <span class="string">&quot;./test.js&quot;</span></span><br><span class="line"><span class="comment">//若是另外一个模块中有同名的顺序,可以给同名的属性起一个别名</span></span><br><span class="line"><span class="keyword">import</span>&#123;a <span class="keyword">as</span> school,c&#125; <span class="keyword">from</span> <span class="string">&quot;./test2.js&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//简便形式:只能针对默认暴露</span></span><br><span class="line"><span class="keyword">import</span> test3 <span class="keyword">from</span> <span class="string">&quot;./test3.js&quot;</span></span><br></pre></td></tr></table></figure><h6 id="1-20-5-ES6模块化方式的另外一种"><a href="#1-20-5-ES6模块化方式的另外一种" class="headerlink" title="1.20.5 ES6模块化方式的另外一种"></a>1.20.5 ES6模块化方式的另外一种</h6><p>创建一个js文件：里面的内容为import 引入数据模块 </p><p>在到正式的文件当中引入改文件，在script标签中加上type=moduole即可</p><h5 id="1-21-label对ES6模块化代码的转换"><a href="#1-21-label对ES6模块化代码的转换" class="headerlink" title="1.21 label对ES6模块化代码的转换"></a>1.21 label对ES6模块化代码的转换</h5><p>==可以将ES比较新的语法转换为浏览器能够识别的ES5的语法，代码==</p><h4 id="2-ES7新特性"><a href="#2-ES7新特性" class="headerlink" title="2.ES7新特性"></a>2.ES7新特性</h4><ol><li>Array.prototype.includes：用来检测数组中是否包含某个元素，返回布尔类型值</li><li>在ES7中引入指数操作符**，用来实现幂运算，功能与Math.pow结果相同</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//includes的用法</span></span><br><span class="line">        <span class="keyword">const</span> a=[<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;4&quot;</span>,<span class="string">&quot;5&quot;</span>,<span class="string">&quot;6&quot;</span>,<span class="string">&quot;7&quot;</span>,<span class="string">&quot;8&quot;</span>,<span class="string">&quot;9&quot;</span>];</span><br><span class="line">        <span class="comment">//判断</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="title function_">includes</span>(<span class="string">&quot;2&quot;</span>));</span><br></pre></td></tr></table></figure><h5 id="3-ES8新特性"><a href="#3-ES8新特性" class="headerlink" title="3. ES8新特性"></a>3. ES8新特性</h5><h6 id="3-1-async和await函数"><a href="#3-1-async和await函数" class="headerlink" title="3.1 async和await函数"></a>3.1 async和await函数</h6><p>这两个语法结合可以让异步代码像同步代码一样</p><p>1.async函数</p><ul><li>返回对象为promise对象</li><li>promise对象的结果由async函数执行的返回值决定</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">          <span class="comment">// return &quot;123&quot;;//返回的结果不是一个promise对象，则函数返回的结果就是成功的promise对象</span></span><br><span class="line">          <span class="comment">// throw new Error(&quot;出错了&quot;);//抛出错误，返回的结果是一个失败的promise对象</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">//返回的结果如果是一个promise对象，那么结果就是一个promise对象</span></span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span>&#123;</span><br><span class="line">              <span class="comment">// resolve(&quot;成功&quot;);</span></span><br><span class="line">              <span class="title function_">reject</span>(<span class="string">&quot;失败了&quot;</span>)</span><br><span class="line">              <span class="comment">//如果返回的是一个失败的promise对象，那么结果就是一个失败的promise对象</span></span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> result=<span class="title function_">fn</span>();</span><br><span class="line">      <span class="comment">// console.log(result);</span></span><br><span class="line">      result.<span class="title function_">then</span>(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">      &#125;,<span class="function"><span class="params">reason</span>=&gt;</span>&#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">warn</span>(reason);  <span class="comment">//失败了</span></span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure><p>2.await表达式</p><ul><li>await表达式必须放在async函数中</li><li>await右侧的表达一式般为promise对象</li><li>返回的值是promise成功的值</li><li>await的promise失败了，会抛出异常，需要通过try catch 捕获处理</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p=<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)  =&gt;</span> &#123;</span><br><span class="line">         <span class="comment">// resolve(&quot;成功的值&quot;);</span></span><br><span class="line">         <span class="title function_">reject</span>(<span class="string">&quot;失败了&quot;</span>);</span><br><span class="line">     &#125;);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">         <span class="keyword">try</span>&#123;</span><br><span class="line">       <span class="keyword">let</span> result=  <span class="keyword">await</span> p;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">catch</span> (e)&#123;</span><br><span class="line">             <span class="variable language_">console</span>.<span class="title function_">error</span>(e);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//调用函数</span></span><br><span class="line">     <span class="title function_">main</span>();</span><br></pre></td></tr></table></figure><p>3.await和async函数结合读取文件内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.引入fs模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="comment">//封装大学内容</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">readDaXue</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        fs.<span class="title function_">readFile</span>(<span class="string">&quot;./resources/大学.md&quot;</span>, <span class="function">(<span class="params">error, data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (error) <span class="title function_">reject</span>(err);</span><br><span class="line">            <span class="title function_">resolve</span>(data);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">readShu</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        fs.<span class="title function_">readFile</span>(<span class="string">&quot;./resources/蜀道难.md&quot;</span>, <span class="function">(<span class="params">error, data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (error) <span class="title function_">reject</span>(err);</span><br><span class="line">            <span class="title function_">resolve</span>(data);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">readShi</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        fs.<span class="title function_">readFile</span>(<span class="string">&quot;./resources/望庐山瀑布.md&quot;</span>, <span class="function">(<span class="params">error, data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (error) <span class="title function_">reject</span>(err);</span><br><span class="line">            <span class="title function_">resolve</span>(data);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明一个async函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//获取大学</span></span><br><span class="line">    <span class="keyword">let</span> daxue = <span class="keyword">await</span> <span class="title function_">readDaXue</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="title class_">Shu</span> = <span class="keyword">await</span> <span class="title function_">readShu</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="title class_">Shi</span> = <span class="keyword">await</span> <span class="title function_">readShi</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(daxue.<span class="title function_">toString</span>());</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Shu</span>.<span class="title function_">toString</span>());</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Shi</span>.<span class="title function_">toString</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一定要调用函数</span></span><br><span class="line"><span class="title function_">main</span>();</span><br></pre></td></tr></table></figure><p>4.ES8对象方法的扩展</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> school = &#123;</span><br><span class="line">           <span class="attr">name</span>: <span class="string">&#x27;尚硅谷&#x27;</span>,</span><br><span class="line">           <span class="attr">cities</span>: [<span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;上海&#x27;</span>, <span class="string">&#x27;深圳&#x27;</span>],</span><br><span class="line">           <span class="attr">xueke</span>: [<span class="string">&#x27;前端&#x27;</span>, <span class="string">&#x27;Java&#x27;</span>, <span class="string">&#x27;大数据&#x27;</span>, <span class="string">&#x27;运维&#x27;</span>]</span><br><span class="line">       &#125;;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//获取对象所有的键</span></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(school));</span><br><span class="line"></span><br><span class="line">       <span class="comment">//获取对象所有的值</span></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">values</span>(school));</span><br><span class="line"></span><br><span class="line">       <span class="comment">//entries,用来创建map</span></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>(school));</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Map</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>(school)))</span><br><span class="line"></span><br><span class="line">       <span class="comment">//对象属性的描述对象</span></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptors</span>(school)); </span><br><span class="line"></span><br><span class="line">        <span class="comment">//creat创建对象时属性描述的结构</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">const</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>, &#123; <span class="comment">//第一个参数为原型对象，第二个位自己描述的对象</span></span><br><span class="line">           </span><br><span class="line">           <span class="attr">name</span>: &#123;</span><br><span class="line">               <span class="attr">value</span>: <span class="string">&#x27;尚硅谷&#x27;</span>,</span><br><span class="line">               <span class="comment">//属性特性</span></span><br><span class="line">               <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">               <span class="attr">configurable</span>: <span class="literal">true</span>,<span class="comment">//是否可以删除</span></span><br><span class="line">               <span class="attr">enumerable</span>: <span class="literal">true</span>,<span class="comment">//是否可以枚举</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">      </span><br></pre></td></tr></table></figure><h4 id="3-ES9"><a href="#3-ES9" class="headerlink" title="3. ES9"></a>3. ES9</h4><h5 id="3-1扩展运算符与rest参数"><a href="#3-1扩展运算符与rest参数" class="headerlink" title="3.1扩展运算符与rest参数"></a>3.1扩展运算符与rest参数</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">connect</span>(<span class="params">&#123; a, b, c, ...rest &#125;</span>) &#123;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(c);</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(rest);<span class="comment">//&#123;d:f  e:f&#125;</span></span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="title function_">connect</span>(&#123;</span><br><span class="line">           <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">           <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">           <span class="attr">c</span>: <span class="number">3</span>,</span><br><span class="line">           <span class="attr">d</span>: <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">               <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;你是傻逼&quot;</span>)</span><br><span class="line">           &#125;,</span><br><span class="line">           <span class="attr">e</span>: <span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span><br><span class="line">               <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hhhhh&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//扩展运算符对对象的操作：将多个对象的属性放到一个对象当中去</span></span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">AA</span>=&#123;</span><br><span class="line">        <span class="attr">username</span>:<span class="string">&#x27;ran&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">BB</span>=&#123;</span><br><span class="line">        <span class="attr">password</span>:<span class="string">&#x27;lyyrhf&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">CC</span>=&#123;</span><br><span class="line">        <span class="attr">job</span>:<span class="string">&#x27;Java&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> D=&#123;...<span class="variable constant_">AA</span>,...<span class="variable constant_">BB</span>,...<span class="variable constant_">CC</span>&#125;;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(D) <span class="comment">//&#123;username: &quot;ran&quot;, password: &quot;lyyrhf&quot;, job: &quot;Java&quot;&#125;</span></span><br></pre></td></tr></table></figure><h4 id="4-ES10"><a href="#4-ES10" class="headerlink" title="4. ES10"></a>4. ES10</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Object.fromEntries :将二维数组转换为对象 与Object.entries是相反的，对象转换为二维数组</span></span><br><span class="line"><span class="keyword">const</span> result =<span class="title class_">Object</span>.<span class="title function_">fromEntries</span>([</span><br><span class="line">            [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;尚硅谷&quot;</span>],</span><br><span class="line">            [<span class="string">&quot;xuexi&quot;</span>,<span class="string">&quot;今天不学习，明天变垃圾&quot;</span>]</span><br><span class="line"></span><br><span class="line">        ])</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(result);<span class="comment">//&#123;a: &quot;尚硅谷&quot;, xuexi: &quot;今天不学习，明天变垃圾&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">   m.<span class="title function_">set</span>(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;ranhaifeng&#x27;</span>)</span><br><span class="line">   <span class="keyword">const</span> result = <span class="title class_">Object</span>.<span class="title function_">fromEntries</span>(m)</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">//&#123;name: &quot;ranhaifeng&quot;&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字符串方法扩展</span></span><br><span class="line"><span class="comment">//trim:清楚空白字符串 trimstart：清楚空白字符串的左侧 trimend：清楚空白字符串右侧</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数组方法扩展flat与flatmap</span></span><br><span class="line"><span class="comment">//flat:能够将多维数组转换为低维数组</span></span><br><span class="line"> <span class="keyword">const</span> a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="title function_">flat</span>());<span class="comment">//1,2,3,4,5,6,7</span></span><br><span class="line"> <span class="keyword">const</span> a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]]];</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="title function_">flat</span>(<span class="number">2</span>)); <span class="comment">//传递的数字表示深度，三维转至一维，2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr2=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"> <span class="keyword">const</span> result = arr2.<span class="title function_">flatmap</span>(<span class="function"><span class="params">item</span> =&gt;</span> [item * <span class="number">10</span>]); <span class="comment">//如果map的结果是一个多维数组可以进行flat 是两个操作的结合</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Symbol。prototype.description</span></span><br><span class="line"> <span class="keyword">let</span> a=<span class="title class_">Symbol</span>(<span class="string">&quot;hhhh&quot;</span>);</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">description</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
